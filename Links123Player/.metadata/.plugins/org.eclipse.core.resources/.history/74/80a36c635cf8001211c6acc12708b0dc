package 
{
    import VPlayerLoader.*;
    import __AS3__.vec.*;
    import flash.desktop.*;
    import flash.display.*;
    import flash.events.*;
    import flash.filesystem.*;
    import flash.geom.*;
    import flash.media.*;
    import flash.net.*;
    import flash.system.*;
    import flash.ui.*;
    import flash.utils.*;
    import mx.binding.*;
    import mx.controls.*;
    import mx.core.*;
    import mx.effects.*;
    import mx.events.*;
    import mx.states.*;
    import mx.styles.*;
    import org.osmf.events.*;
    import spark.components.*;
    import spark.components.supportClasses.*;
    import spark.effects.*;
    import spark.layouts.*;
    import spark.primitives.*;

    public class VPlayerLoader
    {
      
        private var __moduleFactoryInitialized:Boolean = false;
        private var INCLUDE_LOGIN:Boolean = false;
        private var model:ContentModel;
        private var mainClip:MovieClip;
        public var baseUrl:String;
        private var globalVolume:Number;
        private var globalMute:Boolean = false;
        private var soundEngine:SoundByteEngine;
        private var decay:Number = 0;
        private var sensitivity:Number;
        private var mouseIntensity:Number;
        private var movieSpeed:Number;
        private var osFactor:Number = 5;
        private var originalOsFactor:Number = 5;
        private var skipCount:int = 0;
        private var skipVal:int = 1;
        private var baseFramesToSkip:int = 2;
        private var maxFramesToSkip:int = 2;
        private var maxSkipFramesSetting:int = 2;
        private var prevTime:uint = 0;
        private var elapsed:uint = 0;
        private var targetFps:int = 60;
        private var targetInterval:Number = 16;
        private var fpsMult:Number = 1;
        private var remainder:Number = 0;
        private var sceneFpsArray:Array;
        public var STATE_LOADING:String = "loading";
        public var STATE_LOGIN:String = "login";
        public var STATE_TITLE_ANIM:String = "titleAnim";
        public var STATE_INITIAL:String = "initial";
        public var STATE_INSTRUCTIONS:String = "instructions";
        public var STATE_PLAYBACK:String = "playback";
        public var STATE_SCENE_INTERACTIVE:String = "interactive";
        public var STATE_INTRO:String = "intro";
        public var STATE_SCENE_INTRO:String = "sceneIntro";
        public var STATE_SCENE_IDLE:String = "idle";
        public var STATE_SCENE_CLIMAX:String = "sceneClimax";
        public var STATE_CLIMAX:String = "climax";
        private var state:String;
        private var mouseHideCounter:int = 0;
        private var changeAudioCounter:int = 0;
        public var fileToLoad:String;
        private var clipLoader:SWFLoader;
        private var clipLoader2:Loader;
        private var loadClipNum:int;
        private var numScenes:int = 8;
        public var vidSizes:Vector.<Point>;
        protected var isMac:Boolean = false;
        protected var isWindows:Boolean = false;
        public var process:NativeProcess;
        public var MAX_MOVIE_SPEED:int = 90;
        protected var allFilesLoaded:Boolean = false;
        protected var legalInfoShown:Boolean = false;
        protected var listeningForResize:Boolean = false;
        protected var _780750482controlPanelY:Number;
        protected var _921406733isMeterVisible:Boolean = true;
        protected var boostMinSpeed:Boolean = true;
        protected var cfg:File;
        public var configFile:File;
        private var _804457099configXml:XML;
        public var stream:FileStream;
        public var contentDir:File;
        public var prefs:Object;
        protected var _266666762userName:String;
        protected var _3591pw:String;
        protected var clipsToLoad:Array;
        protected var startedInteractive:Boolean = false;
        private var sceneButtons:Array;
        protected var pausePos:int = 0;
        public var runningAvg:Number = 0;
        public var runningCount:int = 8;
        public var measures:Array;
        public var distance:Number = 0;
        public var zeroCount:int = 0;
        public var lowCount:int = 0;
        public var soundStopped:Boolean = false;
        public var highSpeedTime:uint;
        public var directControl:Boolean = true;
        public var responsiveness:Number = 0.1;
        public var resumeThreshold:int = 15;
        private var prevMeterValue:Number;
        protected var idleTimer:Timer;
        private var elapsedSum:int = 0;
        private var frameSum:int = 0;
        private var tickSum:int = 0;
        protected var allowWindowing:Boolean = false;
        protected var rewindTime:Number = 3;
        public var controlPanelMinimized:Boolean = false;
        protected var mouseTimer:Timer;
        var _VPlayerLoader_StylesInit_done:Boolean = false;
        var _bindings:Array;
        var _watchers:Array;
        var _bindingsByDestination:Object;
        var _bindingsBeginWithWord:Object;
        private static var _watcherSetupUtil:IWatcherSetupUtil2;
        private static var _skinParts:Object = {gripper:false, contentGroup:false, statusBar:false, statusText:false, controlBarGroup:false, titleBar:false};

        public function VPlayerLoader()
        {
            var target:Object;
            var watcherSetupUtilClass:Object;
            this.state = this.STATE_LOADING;
            this.clipsToLoad = [];
            this.measures = [0, 0, 0, 0, 0, 0, 0, 0];
            this.idleTimer = new Timer(700, 1);
            this._bindings = [];
            this._watchers = [];
            this._bindingsByDestination = {};
            this._bindingsBeginWithWord = {};
            mx_internal::_document = this;
            var bindings:* = this._VPlayerLoader_bindingsSetup();
            var watchers:Array;
            target;
            if (_watcherSetupUtil == null)
            {
                watcherSetupUtilClass = getDefinitionByName("_VPlayerLoaderWatcherSetupUtil");
                var _loc_2:* = watcherSetupUtilClass;
                _loc_2.watcherSetupUtilClass["init"](null);
            }
            _watcherSetupUtil.setup(this, function (param1:String)
            {
                return target[param1];
            }// end function
            , function (param1:String)
            {
                return [param1];
            }// end function
            , bindings, watchers);
            mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
            mx_internal::_watchers = mx_internal::_watchers.concat(watchers);
            this._VPlayerLoader_DesignLayer1_i();
            this._VPlayerLoader_DesignLayer2_i();
            this._VPlayerLoader_DesignLayer3_i();
            this.preloaderChromeColor = 0;
            this.showStatusBar = false;
            this.width = 1280;
            this.height = 720;
            this.minWidth = 1060;
            this.minHeight = 600;
            this.transitions = [this._VPlayerLoader_Transition1_c(), this._VPlayerLoader_Transition2_c(), this._VPlayerLoader_Transition3_c(), this._VPlayerLoader_Transition4_c(), this._VPlayerLoader_Transition5_c(), this._VPlayerLoader_Transition6_c()];
            this.mxmlContentFactory = new DeferredInstanceFromFunction(this._VPlayerLoader_Array81_c);
            this.currentState = "loading";
            this._VPlayerLoader_Parallel1_i();
            this._VPlayerLoader_Parallel3_i();
            this.addEventListener("applicationComplete", this.___VPlayerLoader_WindowedApplication1_applicationComplete);
            this.addEventListener("closing", this.___VPlayerLoader_WindowedApplication1_closing);
            this.addEventListener("invoke", this.___VPlayerLoader_WindowedApplication1_invoke);
            var _VPlayerLoader_BitmapImage5_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_BitmapImage5_i);
            var _VPlayerLoader_DisclaimerPanel1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_DisclaimerPanel1_i);
            var _VPlayerLoader_InstructionsPanel1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_InstructionsPanel1_i);
            var _VPlayerLoader_LoginScreen1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_LoginScreen1_i);
            var _VPlayerLoader_MovementBar1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_MovementBar1_i);
            var _VPlayerLoader_RadioButton1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton1_i);
            var _VPlayerLoader_RadioButton10_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton10_i);
            var _VPlayerLoader_RadioButton2_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton2_i);
            var _VPlayerLoader_RadioButton3_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton3_i);
            var _VPlayerLoader_RadioButton4_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton4_i);
            var _VPlayerLoader_RadioButton5_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton5_i);
            var _VPlayerLoader_RadioButton6_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton6_i);
            var _VPlayerLoader_RadioButton7_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton7_i);
            var _VPlayerLoader_RadioButton8_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton8_i);
            var _VPlayerLoader_RadioButton9_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_RadioButton9_i);
            var _VPlayerLoader_SWFLoader1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_SWFLoader1_i);
            var _VPlayerLoader_SkinnableContainer1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_SkinnableContainer1_i);
            var _VPlayerLoader_SkinnableContainer2_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_SkinnableContainer2_i);
            var _VPlayerLoader_SkinnableContainer3_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_SkinnableContainer3_i);
            var _VPlayerLoader_ToggleButton1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_ToggleButton1_i);
            var _VPlayerLoader_ToggleButton2_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_ToggleButton2_i);
            var _VPlayerLoader_ToggleButton3_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_ToggleButton3_i);
            var _VPlayerLoader_ToggleButton4_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_ToggleButton4_i);
            var _VPlayerLoader_ToyActiveIndicator1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_ToyActiveIndicator1_i);
            var _VPlayerLoader_UIComponent1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_UIComponent1_i);
            var _VPlayerLoader_VideoDisplay1_factory:* = new DeferredInstanceFromFunction(this._VPlayerLoader_VideoDisplay1_i);
            var _loc_2:* = SetProperty(new SetProperty().initializeFromObject({target:"trackBg", name:"visible", value:undefined}));
            this._VPlayerLoader_SetProperty1 = SetProperty(new SetProperty().initializeFromObject({target:"trackBg", name:"visible", value:undefined}));
            var _loc_2:* = SetProperty(new SetProperty().initializeFromObject({isBaseValueDataBound:true, target:"movementMeter", name:"visible", value:undefined}));
            this._VPlayerLoader_SetProperty2 = SetProperty(new SetProperty().initializeFromObject({isBaseValueDataBound:true, target:"movementMeter", name:"visible", value:undefined}));
            states = [new State({name:"loading", overrides:[new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_UIComponent1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SWFLoader1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_DisclaimerPanel1_factory, destination:null, position:"after", relativeTo:["splashscreen1"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_LoginScreen1_factory, destination:null, position:"after", relativeTo:["splashscreen1"]}), new SetProperty().initializeFromObject({target:"loginScreen", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"clipContainer", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"volumeSlider", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"minimizeBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"volumeBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"gearBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"interactiveTxt", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"pauseBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"scrubber", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"designlayer8", name:"visible", value:false})]}), new State({name:"login", overrides:[new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_UIComponent1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SWFLoader1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_DisclaimerPanel1_factory, destination:null, position:"after", relativeTo:["splashscreen1"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_LoginScreen1_factory, destination:null, position:"after", relativeTo:["splashscreen1"]}), new SetProperty().initializeFromObject({target:"loginScreen", name:"visible", value:true}), new SetProperty().initializeFromObject({target:"clipContainer", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"normalSizeBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"fullScreenBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"closeAppBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"volumeSlider", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"minimizeBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"volumeBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"gearBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"maxSpeedBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"interactiveTxt", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"pauseBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"scrubber", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"designlayer8", name:"visible", value:false})]}), new State({name:"initial", overrides:[new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton10_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton9_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton8_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton7_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton6_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton5_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton4_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton3_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton2_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton1_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton4_factory, destination:"controlPanel", position:"after", relativeTo:["gearBtn"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer3_factory, destination:"controlPanelHolder", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer2_factory, destination:null, position:"after", relativeTo:["videoContainer"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton3_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton2_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton1_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer1_factory, destination:null, position:"after", relativeTo:["videoContainer"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_UIComponent1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new SetProperty().initializeFromObject({target:"clipContainer", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"normalSizeBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"normalSizeBtn", name:"alpha", value:0}), new SetProperty().initializeFromObject({target:"fullScreenBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"fullScreenBtn", name:"alpha", value:0}), new SetProperty().initializeFromObject({target:"closeAppBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"closeAppBtn", name:"alpha", value:0}), new SetProperty().initializeFromObject({target:"volumeSlider", name:"alpha", value:0}), new SetProperty().initializeFromObject({target:"maxSpeedBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"maxSpeedBtn", name:"alpha", value:0}), new SetProperty().initializeFromObject({target:"introBtn", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"sceneBtn2", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"sceneBtn3", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"sceneBtn4", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"sceneBtn5", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"sceneBtn6", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"sceneBtn7", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"sceneBtn8", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"sceneBtn9", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"climaxBtn", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"pauseBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"scrubber", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"designlayer8", name:"visible", value:false})]}), new State({name:"playback", overrides:[new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton10_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton9_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton8_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton7_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton6_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton5_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton4_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton3_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton2_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton1_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToyActiveIndicator1_factory, destination:"controlPanel", position:"after", relativeTo:["gearBtn"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton4_factory, destination:"controlPanel", position:"after", relativeTo:["gearBtn"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer3_factory, destination:"controlPanelHolder", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer2_factory, destination:null, position:"after", relativeTo:["videoContainer"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton3_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton2_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton1_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer1_factory, destination:null, position:"after", relativeTo:["videoContainer"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_VideoDisplay1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new SetProperty().initializeFromObject({target:"volumeSlider", name:"alpha", value:0}), new SetProperty().initializeFromObject({target:"maxSpeedBtn", name:"visible", value:true}), new SetProperty().initializeFromObject({target:"activeIndicator", name:"currentState", value:"idle"}), new SetProperty().initializeFromObject({target:"pauseBtn", name:"enabled", value:true}), new SetProperty().initializeFromObject({target:"designlayer8", name:"visible", value:true}), new SetProperty().initializeFromObject({target:"trackBg", name:"visible", value:false}), new SetProperty().initializeFromObject({isBaseValueDataBound:true, target:"movementMeter", name:"visible", value:false})]}), new State({name:"interactive", overrides:[new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_MovementBar1_factory, destination:"controlPanel", position:"after", relativeTo:["minusBtn"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_BitmapImage5_factory, destination:"controlPanel", position:"after", relativeTo:["minusBtn"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton10_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton9_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton8_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton7_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton6_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton5_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton4_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton3_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton2_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_RadioButton1_factory, destination:"sceneGroup", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToyActiveIndicator1_factory, destination:"controlPanel", position:"after", relativeTo:["gearBtn"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton4_factory, destination:"controlPanel", position:"after", relativeTo:["gearBtn"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer3_factory, destination:"controlPanelHolder", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer2_factory, destination:null, position:"after", relativeTo:["videoContainer"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton3_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton2_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_ToggleButton1_factory, destination:"screenBar", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_SkinnableContainer1_factory, destination:null, position:"after", relativeTo:["videoContainer"]}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_UIComponent1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_VideoDisplay1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new SetProperty().initializeFromObject({target:"videoPlayer", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"clipContainer", name:"visible", value:true}), new SetProperty().initializeFromObject({target:"volumeSlider", name:"alpha", value:0}), new SetProperty().initializeFromObject({target:"activeIndicator", name:"currentState", value:"active"}), new SetProperty().initializeFromObject({target:"pauseBtn", name:"visible", value:true}), new SetProperty().initializeFromObject({target:"pauseBtn", name:"enabled", value:false}), new SetProperty().initializeFromObject({target:"scrubber", name:"visible", value:false}), _loc_2, _loc_2]}), new State({name:"instructions", overrides:[new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_UIComponent1_factory, destination:"videoContainer", propertyName:"mxmlContent", position:"first"}), new AddItems().initializeFromObject({itemsFactory:_VPlayerLoader_InstructionsPanel1_factory, destination:null, position:"after", relativeTo:["splashscreen1"]}), new SetProperty().initializeFromObject({target:"clipContainer", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"volumeSlider", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"minimizeBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"volumeBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"gearBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"interactiveTxt", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"pauseBtn", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"scrubber", name:"visible", value:false}), new SetProperty().initializeFromObject({target:"designlayer8", name:"visible", value:false})]})];
            BindingManager.executeBindings(this, "_VPlayerLoader_SetProperty1", this._VPlayerLoader_SetProperty1);
            BindingManager.executeBindings(this, "_VPlayerLoader_SetProperty2", this._VPlayerLoader_SetProperty2);
            var i:uint;
            while (i < bindings.length)
            {
                
                Binding(bindings[i]).execute();
                i = (i + 1);
            }
            return;
        }// end function

        override public function set moduleFactory(param1:IFlexModuleFactory) : void
        {
            var factory:* = param1;
            super.moduleFactory = factory;
            if (this.__moduleFactoryInitialized)
            {
                return;
            }
            this.__moduleFactoryInitialized = true;
            if (!this.styleDeclaration)
            {
                this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
            }
            this.styleDeclaration.defaultFactory = function () : void
            {
                this.backgroundColor = 0;
                return;
            }// end function
            ;
            .mx_internal::_VPlayerLoader_StylesInit();
            return;
        }// end function

        override public function initialize() : void
        {
            super.initialize();
            return;
        }// end function

        protected function initApp() : void
        {
            trace("initApp()");
            this.addDebugConsole();
            SoundMixer.soundTransform = new SoundTransform(0);
            this.globalVolume = 1;
            return;
        }// end function

        protected function onAppInvoked(event:InvokeEvent) : void
        {
            arguments = new activation;
            var configName:String;
            var showLoginScreen:Boolean;
            var e:* = event;
            var arguments:* = arguments;
            if (this.configFile != null)
            {
                return;
            }
            this.contentDir = currentDirectory;
            this.debug("currentDirectory = " + this.contentDir.nativePath);
            this.debug("applicationDirectory = " + File.applicationDirectory.nativePath);
            this.debug("appStorageDirectory = " + File.applicationStorageDirectory.nativePath);
            var args:* = arguments;
            this.debug("app invoked, args=" + );
            if ()
            {
            }
            if (length > 0)
            {
                configName = [0];
                this.debug("configName parameter = " + );
                try
                {
                    this.cfg = new File();
                    this.debug("set cfg to " + this.cfg.nativePath);
                    this.contentDir = this.cfg.parent;
                    this.debug("set contentDir to " + this.contentDir.nativePath);
                }
                catch (err:Error)
                {
                    debug("ERROR: " + err.message);
                }
            }
            else
            {
                this.cfg = File.applicationDirectory.resolvePath("content/config.xml");
            }
            if (this.INCLUDE_LOGIN)
            {
                showLoginScreen;
                this.prefs = this.loadPrefs();
                if (this.prefs)
                {
                    if (this.prefs["userName"] != null)
                    {
                    }
                    if (this.prefs["userName"] != "")
                    {
                        this.userName = this.prefs["userName"];
                        if (this.prefs["pw"] != null)
                        {
                            this.pw = this.prefs["pw"];
                            this.autoLogin(this.userName, this.pw);
                            showLoginScreen;
                        }
                    }
                }
                if ()
                {
                    this.showLogin();
                }
            }
            else
            {
                this.resumeStartup();
            }
            return;
        }// end function

        protected function loadPrefs() : Object
        {
            var _loc_1:* = SharedObject.getLocal("vplayerPrefs");
            if (_loc_1)
            {
                return _loc_1.data;
            }
            return {userName:"", pw:""};
        }// end function

        protected function savePrefs(param1:Object) : void
        {
            var _loc_2:* = SharedObject.getLocal("vplayerPrefs");
            if (param1["userName"] != null)
            {
                _loc_2.data.userName = param1.userName;
            }
            if (param1["pw"] != null)
            {
                _loc_2.data.pw = param1.pw;
            }
            _loc_2.flush(10000);
            return;
        }// end function

        private function autoLogin(param1:String, param2:String) : void
        {
            this.loginScreen.addEventListener(LoginScreen.LOGIN_SUCCESS, this.onLoginSuccess, false, 0, true);
            this.loginScreen.addEventListener(LoginScreen.LOGIN_FAILURE, this.onAutoLoginFailure, false, 0, true);
            this.loginScreen.userNameTxt.text = param1;
            this.loginScreen.pwTxt.text = param2;
            this.loginScreen.doLogin();
            return;
        }// end function

        protected function onLoginSuccess(event:Event) : void
        {
            this.loginScreen.removeEventListener(LoginScreen.LOGIN_SUCCESS, this.onLoginSuccess);
            this.loginScreen.removeEventListener(LoginScreen.LOGIN_FAILURE, this.onAutoLoginFailure);
            this.prefs["userName"] = this.loginScreen.userNameTxt.text;
            this.prefs["pw"] = this.loginScreen.pwTxt.text;
            this.savePrefs(this.prefs);
            this.loginScreen.visible = false;
            this.resumeStartup();
            return;
        }// end function

        protected function onAutoLoginFailure(event:Event) : void
        {
            this.loginScreen.removeEventListener(LoginScreen.LOGIN_SUCCESS, this.onLoginSuccess);
            this.loginScreen.removeEventListener(LoginScreen.LOGIN_FAILURE, this.onAutoLoginFailure);
            this.showLogin();
            return;
        }// end function

        private function showLogin() : void
        {
            currentState = this.STATE_LOGIN;
            this.loginScreen.addEventListener(LoginScreen.LOGIN_SUCCESS, this.onLoginSuccess, false, 0, true);
            this.loginScreen.addEventListener(LoginScreen.LOGIN_FAILURE, this.onLoginFailure, false, 0, true);
            return;
        }// end function

        protected function onLoginFailure(event:Event) : void
        {
            return;
        }// end function

        protected function resumeStartup() : void
        {
            if (this.cfg.exists)
            {
                this.debug("file " + this.cfg.nativePath + " exists!");
                this.loadConfig(this.cfg);
                return;
            }
            this.debug("file " + this.cfg.nativePath + " does not exist");
            this.debug("checking for configFile...");
            if (this.configFile == null)
            {
                this.browseConfigFile();
            }
            return;
        }// end function

        protected function browseConfigFile() : void
        {
            var fileToOpen:* = File.applicationDirectory;
            fileToOpen = fileToOpen.resolvePath("content");
            var txtFilter:* = new FileFilter("VPlayer Content", "*.vpc;*.xml");
            try
            {
                fileToOpen.browseForOpen("Open", [txtFilter]);
                fileToOpen.addEventListener(Event.SELECT, this.configFileSelected);
                fileToOpen.addEventListener(Event.CANCEL, this.browseCanceled);
            }
            catch (error:Error)
            {
                debug("Failed:", error.message);
                showFileNotFoundAlert("There was an error loading that file.");
            }
            return;
        }// end function

        protected function browseCanceled(event:Event) : void
        {
            this.showFileNotFoundAlert("You must select a Content file in order to run VPlayer.");
            return;
        }// end function

        protected function configFileSelected(event:Event) : void
        {
            var _loc_2:* = event.target as File;
            this.loadConfig(_loc_2);
            return;
        }// end function

        protected function loadConfig(param1:File) : void
        {
            var filePath:String;
            var appPathLoc:int;
            var tempUrl:String;
            var tempDir:File;
            var meterVisibleStr:String;
            var boostMinSpeedStr:String;
            var fps:int;
            var i:int;
            var sceneList:XMLList;
            var sceneFps:Number;
            var entry:XML;
            var lc:LoaderContext;
            var tempFile:File;
            var cfg:* = param1;
            if (cfg.exists)
            {
                this.configFile = cfg;
                this.debug("native   = " + cfg.parent.nativePath + "/");
                filePath = cfg.nativePath;
                appPathLoc = filePath.indexOf(File.applicationDirectory.nativePath);
                if (appPathLoc < 0)
                {
                    tempUrl = cfg.parent.url;
                    tempDir = new File(tempUrl);
                    this.baseUrl = tempDir.url + "/";
                }
                else
                {
                    tempUrl = cfg.parent.nativePath.substr((File.applicationDirectory.nativePath.length + 1));
                    tempDir = File.applicationDirectory.resolvePath(tempUrl);
                    this.baseUrl = tempDir.url + "/";
                }
                this.debug("baseUrl=" + this.baseUrl);
                this.stream = new FileStream();
                this.stream.open(cfg, FileMode.READ);
                this.configXml = XML(this.stream.readUTFBytes(this.stream.bytesAvailable));
                this.stream.close();
                meterVisibleStr = this.configXml.meterVisible;
                if (meterVisibleStr == "false")
                {
                    this.isMeterVisible = false;
                }
                boostMinSpeedStr = this.configXml.boostMinSpeed;
                if (boostMinSpeedStr == "false")
                {
                    this.boostMinSpeed = false;
                }
                fps = parseInt(this.configXml.videoFps);
                this.adjustTargetFps(fps);
                this.debug("DEFAULT targetFps = " + this.targetFps);
                this.sceneFpsArray = new Array(this.numScenes);
                i;
                while (i < this.numScenes)
                {
                    
                    this.sceneFpsArray[i] = this.targetFps;
                    i = (i + 1);
                }
                var _loc_4:int = 0;
                var _loc_5:* = this.configXml.scenes.scene;
                var _loc_3:* = new XMLList("");
                for each (_loc_6 in _loc_5)
                {
                    
                    var _loc_7:* = _loc_6;
                    with (_loc_6)
                    {
                        if (@num > 0)
                        {
                            _loc_3[_loc_4] = _loc_6;
                        }
                    }
                }
                sceneList = _loc_3;
                var _loc_3:int = 0;
                var _loc_4:* = sceneList;
                while (_loc_4 in _loc_3)
                {
                    
                    entry = _loc_4[_loc_3];
                    sceneFps = entry.@fps;
                    this.debug("scene num " + entry.@num + " getting target fps = " + entry.@fps);
                    if (!isNaN(sceneFps))
                    {
                    }
                    if (entry.@num <= this.numScenes)
                    {
                    }
                    if (sceneFps >= 10)
                    {
                    }
                    if (sceneFps <= 120)
                    {
                        this.sceneFpsArray[(entry.@num - 1)] = sceneFps;
                    }
                }
                lc = new LoaderContext(false, ApplicationDomain.currentDomain);
                this.disclaimerPanel.mainImage.loaderContext = lc;
                this.disclaimerPanel.mainImage.loaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.onSWFLoaderError);
                this.disclaimerPanel.mainImage.loaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSWFLoaderSecurityError);
                tempFile = new File(this.baseUrl + "images/loading.png");
                if (tempFile.exists)
                {
                    this.disclaimerPanel.mainImage.source = this.baseUrl + "images/loading.png";
                    this.debug("disclaimerPanel.mainImage.source=" + this.disclaimerPanel.mainImage.source);
                }
                else
                {
                    this.debug("file not found: " + tempFile.nativePath);
                }
                this.startSession();
            }
            else
            {
                this.showFileNotFoundAlert("That is not a valid VPlayer Content file: " + cfg.name);
            }
            return;
        }// end function

        protected function adjustTargetFps(param1:Number) : void
        {
            if (!isNaN(param1))
            {
            }
            if (param1 != this.targetFps)
            {
            }
            if (param1 >= 10)
            {
            }
            if (param1 <= 120)
            {
                this.targetFps = param1;
                this.fpsMult = param1 / 60;
            }
            if (this.maxSpeedBtn)
            {
            }
            if (this.maxSpeedBtn.selected)
            {
                this.adjustMaxSpeed(false);
            }
            this.maxFramesToSkip = Math.floor(this.baseFramesToSkip * this.fpsMult);
            if (this.maxFramesToSkip < 1)
            {
                this.maxFramesToSkip = 1;
            }
            this.MAX_MOVIE_SPEED = this.targetFps + 30;
            this.debug("adjustTargetFps(" + param1 + "), fpsMult=" + this.fpsMult + ", maxSkip=" + this.maxFramesToSkip + ", MAX_MOVIE_SPEED=" + this.MAX_MOVIE_SPEED);
            if (this.maxSpeedBtn)
            {
            }
            if (this.maxSpeedBtn.selected)
            {
                this.adjustMaxSpeed(true);
            }
            return;
        }// end function

        private function showFileNotFoundAlert(param1:String = "") : void
        {
            this.movieSpeed = 1;
            this.mouseIntensity = 1;
            Alert.buttonWidth = 140;
            Alert.buttonHeight = 30;
            Alert.yesLabel = "Try Again";
            Alert.noLabel = "Quit";
            if (param1 == "")
            {
                param1 = "That was not a valid VPlayer Content file.";
            }
            Alert.show(param1 + "\n" + "Click Try Again to continue.", "CONTENT FILE NOT FOUND", Alert.YES | Alert.NO, this, this.onFileNotFoundAlertBtnClicked);
            Alert.yesLabel = "Yes";
            Alert.noLabel = "No";
            return;
        }// end function

        private function onFileNotFoundAlertBtnClicked(event:CloseEvent) : void
        {
            if (event.detail == Alert.YES)
            {
                this.browseConfigFile();
            }
            else
            {
                this.exit();
            }
            return;
        }// end function

        protected function startSession() : void
        {
            this.vidSizes = new Vector.<Point>;
            this.vidSizes.push(new Point(1280, 720));
            this.vidSizes.push(new Point(1920, 1080));
            this.vidSizes.push(new Point(2560, 1440));
            this.startDisclaimer();
            this.loadTitleAnim();
            this.createSceneData();
            this.loadScenes();
            return;
        }// end function

        protected function clearContent() : void
        {
            this.model.clear();
            if (this.titleAnimPlayer.content != null)
            {
                this.titleAnimPlayer.unloadAndStop();
            }
            return;
        }// end function

        protected function createSceneData() : void
        {
            var _loc_2:SceneInfo = null;
            var _loc_3:String = null;
            var _loc_4:File = null;
            var _loc_5:String = null;
            var _loc_6:String = null;
            this.debug("createSceneData()");
            this.scenes = new Vector.<SceneInfo>;
            var _loc_1:int = 1;
            while (_loc_1 <= this.numScenes)
            {
                
                _loc_2 = new SceneInfo();
                _loc_3 = this.baseUrl + "video/intro" + _loc_1 + ".mp4";
                _loc_4 = new File(_loc_3);
                this.debug("!!! checking intro scene: " + _loc_4.url);
                if (_loc_4.exists)
                {
                    this.debug("!!! MP4 intro scene EXISTS ");
                    _loc_2.introFileName = _loc_3;
                }
                else
                {
                    _loc_2.introFileName = this.baseUrl + "video/intro" + _loc_1 + ".flv";
                }
                _loc_2.climaxFileName = this.baseUrl + "video/climax1.flv";
                _loc_2.thumbUrl = this.baseUrl + "thumbs/" + _loc_1 + ".jpg";
                _loc_2.clipNum = _loc_1 + 1;
                _loc_2.addContentFile(this.baseUrl + "video/" + _loc_1 + ".swf");
                this.clipsToLoad.push({id:_loc_1, url:this.baseUrl + "video/" + _loc_1 + ".swf", isAlternate:false});
                _loc_5 = this.baseUrl + "video/" + _loc_1 + "b.swf";
                _loc_4 = new File(_loc_5);
                this.debug("!!! checking content scene: " + _loc_4.url);
                if (_loc_4.exists)
                {
                    this.debug("!!! 2nd content scene EXISTS ");
                    _loc_2.addContentFile(_loc_5);
                    this.clipsToLoad.push({id:_loc_1, url:_loc_5, isAlternate:true});
                }
                else
                {
                    this.debug("!!! second content scene NOT FOUND ");
                }
                _loc_2.addIdleFile(this.baseUrl + "video/idle" + _loc_1 + ".flv");
                _loc_6 = this.baseUrl + "video/idle" + _loc_1 + "b.flv";
                _loc_4 = new File(_loc_6);
                this.debug("!!! checking idle scene: " + _loc_4.url);
                if (_loc_4.exists)
                {
                    this.debug("!!! second idle scene EXISTS ");
                    _loc_2.addIdleFile(_loc_6);
                }
                else
                {
                    this.debug("!!! second idle scene NOT FOUND ");
                }
                if (this.sceneFpsArray[(_loc_1 - 1)] > 0)
                {
                    _loc_2.targetFps = this.sceneFpsArray[(_loc_1 - 1)];
                }
                this.scenes.push(_loc_2);
                this.model = new ContentModel(this.scenes);
                _loc_1 = _loc_1 + 1;
            }
            this.model = new ContentModel(this.scenes);
            return;
        }// end function

        private function startDisclaimer() : void
        {
            this.titleAnimPlayer.visible = false;
            this.disclaimerPanel.visible = true;
            var _loc_1:* = new Timer(5000, 3);
            _loc_1.addEventListener(TimerEvent.TIMER, this.disclaimerComplete);
            _loc_1.start();
            return;
        }// end function

        private function disclaimerComplete(event:TimerEvent) : void
        {
            var _loc_3:Timer = null;
            this.debug("disclaimerComplete()");
            this.legalInfoShown = true;
            var _loc_2:* = this.titleAnimPlayer.content as MovieClip;
            if (_loc_2)
            {
                _loc_3 = event.target as Timer;
                _loc_3.removeEventListener(TimerEvent.TIMER, this.disclaimerComplete);
                _loc_3.stop();
                this.disclaimerPanel.visible = false;
                this.titleAnimPlayer.visible = true;
                SoundMixer.soundTransform = new SoundTransform(1);
                _loc_2.play();
                this.state = this.STATE_TITLE_ANIM;
            }
            return;
        }// end function

        private function loadTitleAnim() : void
        {
            this.debug("loadTitleAnim()");
            stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
            this.setVideoSize(this.vidSizes[0]);
            this.titleAnimPlayer.addEventListener(Event.COMPLETE, this.titleAnimLoaded, false, 0, true);
            this.titleAnimPlayer.source = this.baseUrl + "video/titleAnim.swf";
            this.titleAnimPlayer.load();
            return;
        }// end function

        private function titleAnimLoaded(event:Event) : void
        {
            this.debug("titleAnimLoaded(), content=" + this.titleAnimPlayer.content);
            var _loc_2:* = this.titleAnimPlayer.content as MovieClip;
            if (_loc_2)
            {
                this.debug("titleAnimPlayer.content is MovieClip");
                _loc_2.stop();
                _loc_2.addEventListener("lastFrame", this.titleAnimComplete);
                _loc_2.addFrameScript((_loc_2.totalFrames - 1), this.lastFrameFunction);
            }
            return;
        }// end function

        private function lastFrameFunction() : void
        {
            trace("last frame");
            this.titleAnimComplete();
            return;
        }// end function

        private function titleAnimComplete(event:Event = null) : void
        {
            var _loc_2:Timer = null;
            this.debug("titleAnimComplete()");
            if (event)
            {
                _loc_2 = event.target as Timer;
                _loc_2.removeEventListener(TimerEvent.TIMER, this.titleAnimComplete);
                _loc_2.stop();
            }
            this.titleAnimPlayer.unloadAndStop();
            currentState = this.STATE_INSTRUCTIONS;
            this.checkIfLoaded();
            return;
        }// end function

        private function loadScenes() : void
        {
            this.debug("loadScenes()");
            this.clipLoader = new SWFLoader();
            this.clipLoader.trustContent = true;
            this.clipContainer.opaqueBackground = false;
            this.soundEngine = new SoundByteEngine(this.numScenes, this.baseUrl, this.debug);
            this.clipLoader.visible = false;
            this.debug("sandboxType=" + Security.sandboxType);
            this.debug("currentDomain=" + SecurityDomain.currentDomain);
            this.loadNextScene();
            stage.addEventListener(KeyboardEvent.KEY_UP, this.onHotkey);
            stage.focus = stage;
            return;
        }// end function

        private function loadNextScene() : void
        {
            var _loc_2:LoaderContext = null;
            var _loc_1:* = this.clipsToLoad.shift();
            this.fileToLoad = _loc_1["url"];
            if (this.fileToLoad)
            {
            }
            if (this.fileToLoad != "")
            {
                _loc_2 = new LoaderContext(false, new ApplicationDomain());
                this.clipLoader.loaderContext = _loc_2;
                if (_loc_1["isAlternate"] == true)
                {
                    this.debug("Loading alternate sounds for scene " + _loc_1["id"]);
                    this.soundEngine.loadAudioSet(_loc_1["id"], this.baseUrl, true);
                }
                this.clipLoader.source = this.fileToLoad;
                this.debug("loading file " + this.fileToLoad);
                this.clipLoader.addEventListener(Event.COMPLETE, this.sceneContentLoaded);
                this.clipLoader.addEventListener(IOErrorEvent.IO_ERROR, this.onSWFLoaderError);
                this.clipLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSWFLoaderSecurityError);
                this.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSWFLoaderSecurityError);
                this.clipLoader.load();
            }
            return;
        }// end function

        private function sceneContentLoaded(event:Event) : void
        {
            this.debug("**** sceneContentLoaded()");
            var _loc_2:* = this.clipLoader.content as MovieClip;
            _loc_2.gotoAndStop(0);
            this.debug("**** sceneClip accessed");
            _loc_2.opaqueBackground = false;
            this.model.addClip(this.fileToLoad, _loc_2);
            this.debug("**** clip added... clipsToLoad.length = " + this.clipsToLoad.length);
            if (this.clipsToLoad.length > 0)
            {
                this.loadNextScene();
            }
            else
            {
                this.clipLoader.removeEventListener(Event.COMPLETE, this.sceneContentLoaded);
                this.clipLoader.removeEventListener(IOErrorEvent.IO_ERROR, this.onSWFLoaderError);
                this.clipLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSWFLoaderSecurityError);
                this.clipLoader.unloadAndStop();
                this.clipLoader = null;
                this.allFilesLoaded = true;
                this.checkIfLoaded();
            }
            return;
        }// end function

        protected function checkIfLoaded() : void
        {
            var _loc_1:LoaderContext = null;
            var _loc_2:File = null;
            this.debug("checkIfLoaded(), allFilesLoaded=" + this.allFilesLoaded);
            if (this.allFilesLoaded)
            {
            }
            if (this.legalInfoShown)
            {
                if (this.instructionsPanel)
                {
                    _loc_1 = new LoaderContext(false, ApplicationDomain.currentDomain);
                    this.instructionsPanel.mainImage.loaderContext = _loc_1;
                    this.instructionsPanel.mainImage.loaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.onSWFLoaderError);
                    this.instructionsPanel.mainImage.loaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSWFLoaderSecurityError);
                    _loc_2 = new File(this.baseUrl + "images/instructions.png");
                    if (_loc_2.exists)
                    {
                        this.instructionsPanel.mainImage.source = this.baseUrl + "images/instructions.png";
                        this.instructionsPanel.addEventListener(MouseEvent.CLICK, this.instructions_clickHandler);
                        this.debug("instructionsPanel.mainImage.source=" + this.instructionsPanel.mainImage.source);
                    }
                    else
                    {
                        this.debug("file not found: " + _loc_2.nativePath);
                    }
                }
            }
            return;
        }// end function

        protected function initUi() : void
        {
            this.debug("initUi()");
            this.changeSensitivity();
            this.volumeSlider.value = 1;
            this.sceneButtons = [this.sceneBtn2, this.sceneBtn3, this.sceneBtn4, this.sceneBtn5, this.sceneBtn6, this.sceneBtn7, this.sceneBtn8, this.sceneBtn9];
            this.movieSpeed = 30;
            System.gc();
            currentState = this.STATE_PLAYBACK;
            this.pauseBtn.selected = false;
            this.controlPanelY = this.videoPlayer.height - 37;
            this.optimizeVideoSize();
            stage.addEventListener(FullScreenEvent.FULL_SCREEN, this.onFullScreen);
            this.startIntro();
            this.createMouseTimer();
            return;
        }// end function

        private function onSWFLoaderError(event:IOErrorEvent) : void
        {
            this.debug("onSWFLoaderError(), e: " + event);
            Alert.show("Could not load the file \'" + this.fileToLoad + "\'", "Loading Error", Alert.OK, this);
            return;
        }// end function

        private function onSWFLoaderSecurityError(event:SecurityErrorEvent) : void
        {
            Alert.show(event.text, "SecurityError loading the file \'" + this.fileToLoad + "\'", Alert.OK, this);
            return;
        }// end function

        private function startIntro() : void
        {
            this.debug("startIntro()");
            currentState = this.STATE_PLAYBACK;
            this.state = this.STATE_INTRO;
            this.introBtn.selected = true;
            this.pauseBtn.selected = false;
            this.soundEngine.stopEverything();
            this.playIntro();
            return;
        }// end function

        private function playIntro() : void
        {
            this.debug("playIntro()");
            var _loc_1:* = this.baseUrl + "video/main.flv";
            this.debug("intro file = " + _loc_1);
            this.videoPlayer.source = _loc_1;
            this.videoPlayer.addEventListener(TimeEvent.COMPLETE, this.onIntroComplete, false, 0, true);
            this.scrubber.addEventListener(Event.CHANGE, this.onScrubberChange, false, 0, true);
            this.initVideo();
            this.playVideo();
            return;
        }// end function

        private function onIntroComplete(event:TimeEvent) : void
        {
            this.debug("onIntroComplete()");
            if (!this.startedInteractive)
            {
                this.selectScene(2);
                this.videoPlayer.removeEventListener(TimeEvent.COMPLETE, this.onIntroComplete);
            }
            return;
        }// end function

        private function onMediaPlayerStateChange(event:MediaPlayerStateChangeEvent) : void
        {
            if (event.state == "ready")
            {
            }
            return;
        }// end function

        private function initAndPlayVideo() : void
        {
            this.debug("initAndPlayVideo(), duration=" + this.videoPlayer.duration);
            if (!this.listeningForResize)
            {
                stage.addEventListener(Event.RESIZE, this.resizeDisplay);
                this.listeningForResize = true;
            }
            this.playVideo();
            return;
        }// end function

        private function initVideo() : void
        {
            this.debug("initVideo()");
            if (!this.listeningForResize)
            {
                stage.addEventListener(Event.RESIZE, this.resizeDisplay);
                this.listeningForResize = true;
            }
            return;
        }// end function

        private function optimizeVideoSize() : void
        {
            var _loc_1:int = 0;
            _loc_1 = this.vidSizes.length - 1;
            while (_loc_1 >= 0)
            {
                
                if (stage.stageWidth >= this.vidSizes[_loc_1].x)
                {
                }
                if (stage.stageHeight >= this.vidSizes[_loc_1].y)
                {
                    if (_loc_1 > 0)
                    {
                        this.maximizeWindow();
                    }
                    else
                    {
                        this.setVideoSize(this.vidSizes[_loc_1]);
                    }
                    break;
                }
                _loc_1 = _loc_1 - 1;
            }
            return;
        }// end function

        private function setVideoSize(param1:Point) : void
        {
            if (this.videoContainer != null)
            {
                this.videoContainer.width = param1.x;
                this.videoContainer.height = param1.y;
                this.setInteractiveClipWidth(this.videoContainer.width);
            }
            return;
        }// end function

        private function setInteractiveClipWidth(param1:Number) : void
        {
            if (this.mainClip != null)
            {
                if (this.mainClip.parent != null)
                {
                }
                if (this.mainClip.stage != null)
                {
                    this.mainClip.width = param1;
                    this.mainClip.scaleY = this.mainClip.scaleX;
                    this.mainClip.y = (this.videoContainer.height - this.mainClip.height) * 0.5;
                }
            }
            return;
        }// end function

        private function playVideo(event:Event = null) : void
        {
            this.debug("playVideo()");
            if (!this.videoPlayer.hasEventListener(TimeEvent.CURRENT_TIME_CHANGE))
            {
                this.videoPlayer.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, this.onPlayHeadUpdate, false, 0, true);
            }
            if (!this.scrubber.hasEventListener(Event.CHANGE))
            {
                this.scrubber.addEventListener(Event.CHANGE, this.onScrubberChange, false, 0, true);
            }
            this.videoPlayer.play();
            this.pauseBtn.enabled = true;
            return;
        }// end function

        private function selectScene(param1:int) : void
        {
            if (currentState != this.STATE_LOADING)
            {
            }
            if (currentState != this.STATE_LOGIN)
            {
            }
            if (currentState != this.STATE_INITIAL)
            {
            }
            if (currentState == this.STATE_INSTRUCTIONS)
            {
                return;
            }
            this.debug("selectScene(" + param1 + ")");
            if (param1 >= 2)
            {
            }
            if (param1 > this.numScenes + 2)
            {
                return;
            }
            this.startedInteractive = true;
            this.interactiveTxt.currentState = "selected";
            this.selectRadioBtn(this.sceneButtons[param1 - 2]);
            this.playScene(param1 - 2);
            return;
        }// end function

        private function playScene(param1:int) : void
        {
            this.debug("playScene(" + param1 + ")");
            this.model.currentIndex = param1;
            this.startSceneIntro();
            return;
        }// end function

        private function startSceneIntro() : void
        {
            this.debug("startSceneIntro(), state=" + this.state);
            this.videoPlayer.autoPlay = true;
            if (this.state == this.STATE_SCENE_INTERACTIVE)
            {
                this.stopPlaying();
                this.interactiveTxt.currentState = "idle";
            }
            else if (this.state == this.STATE_SCENE_CLIMAX)
            {
                this.interruptVideo();
            }
            else
            {
                if (this.state != this.STATE_INTRO)
                {
                }
                if (this.state == this.STATE_SCENE_INTRO)
                {
                    this.videoPlayer.stop();
                }
            }
            currentState = this.STATE_PLAYBACK;
            this.state = this.STATE_SCENE_INTRO;
            this.pauseBtn.selected = false;
            var _loc_1:* = this.model.getIntroName(this.model.currentIndex);
            this.debug("playing intro " + _loc_1);
            this.videoPlayer.addEventListener(TimeEvent.COMPLETE, this.startInteractiveScene);
            this.initVideo();
            this.videoPlayer.source = _loc_1;
            return;
        }// end function

        private function startSceneClimax() : void
        {
            var _loc_1:String = null;
            this.debug("startSceneClimax()");
            if (this.state == this.STATE_SCENE_CLIMAX)
            {
                if (this.videoPlayer.playing)
                {
                    this.videoPlayer.seek(0);
                    this.videoPlayer.play();
                }
            }
            else
            {
                if (this.state == this.STATE_SCENE_INTERACTIVE)
                {
                    this.stopPlaying();
                    this.interactiveTxt.currentState = "idle";
                }
                else
                {
                    if (this.state != this.STATE_SCENE_INTRO)
                    {
                    }
                    if (this.state == this.STATE_SCENE_IDLE)
                    {
                        this.interruptVideo();
                    }
                }
                currentState = this.STATE_PLAYBACK;
                this.state = this.STATE_SCENE_CLIMAX;
                this.pauseBtn.selected = false;
                this.climaxBtn.selected = true;
                _loc_1 = this.model.getClimaxName(this.model.currentIndex);
                this.debug("fileName=" + _loc_1);
                this.videoPlayer.addEventListener(TimeEvent.COMPLETE, this.endScene);
                this.initVideo();
                this.videoPlayer.source = _loc_1;
            }
            return;
        }// end function

        private function startSceneIdle() : void
        {
            var _loc_1:String = null;
            this.debug("startSceneIdle()");
            if (this.state == this.STATE_SCENE_IDLE)
            {
                this.debug("already in idle state...");
            }
            else if (this.state == this.STATE_SCENE_INTERACTIVE)
            {
                currentState = this.STATE_PLAYBACK;
                this.state = this.STATE_SCENE_IDLE;
                this.pauseBtn.selected = false;
                _loc_1 = this.model.getIdleName(this.model.currentIndex);
                this.debug("!!! retrieved idle scene: " + _loc_1);
                this.videoPlayer.addEventListener(VideoEvent.PLAYING, this.onIdlePlaying);
                this.videoPlayer.addEventListener(TimeEvent.COMPLETE, this.resumeInteractiveScene);
                if (this.videoPlayer.source == _loc_1)
                {
                    this.debug("replaying existing video...");
                    this.videoPlayer.seek(0);
                    this.videoPlayer.play();
                }
                else
                {
                    this.initVideo();
                    this.videoPlayer.source = _loc_1;
                    this.debug("playing idle " + _loc_1);
                }
            }
            return;
        }// end function

        protected function onIdlePlaying(event:VideoEvent) : void
        {
            this.debug("onIdlePlaying()");
            this.pauseInteractiveScene();
            return;
        }// end function

        private function interruptVideo(event:Event = null) : void
        {
            this.debug("interruptVideo()");
            if (this.videoPlayer.hasEventListener(TimeEvent.COMPLETE))
            {
                try
                {
                    if (this.state == this.STATE_SCENE_INTRO)
                    {
                        this.videoPlayer.removeEventListener(TimeEvent.COMPLETE, this.startInteractiveScene);
                    }
                    if (this.state == this.STATE_SCENE_IDLE)
                    {
                        this.videoPlayer.removeEventListener(TimeEvent.COMPLETE, this.resumeInteractiveScene);
                    }
                    else if (this.state == this.STATE_SCENE_CLIMAX)
                    {
                        this.videoPlayer.removeEventListener(TimeEvent.COMPLETE, this.endScene);
                    }
                }
                catch (err:Error)
                {
                }
            }
            return;
        }// end function

        private function stopVideo(event:Event = null) : void
        {
            this.debug("stopVideo()");
            this.videoPlayer.stop();
            this.clearVideo();
            return;
        }// end function

        private function clearVideo() : void
        {
            this.debug("clearVideo()");
            return;
        }// end function

        protected function onVideoPlayerStateChange(event:MediaPlayerStateChangeEvent) : void
        {
            this.debug("onVideoPlayerStateChange(), state=" + event.state);
            return;
        }// end function

        protected function onVideoLoadProgress(event:ProgressEvent) : void
        {
            this.debug("onVideoLoadProgress(), " + int(100 * event.bytesLoaded / event.bytesTotal) + "%");
            return;
        }// end function

        private function startInteractiveScene(event:Event = null) : void
        {
            this.debug("startInteractiveScene()");
            if (this.videoPlayer.playing)
            {
                this.stopVideo();
            }
            else
            {
                this.clearVideo();
            }
            if (this.videoPlayer.hasEventListener(TimeEvent.COMPLETE))
            {
                this.videoPlayer.removeEventListener(TimeEvent.COMPLETE, this.startInteractiveScene);
            }
            var _loc_2:* = this.model.scenes[this.model.currentIndex];
            if (_loc_2.targetFps > 0)
            {
                this.adjustTargetFps(_loc_2.targetFps);
            }
            currentState = this.STATE_SCENE_INTERACTIVE;
            if (this.driverMgr)
            {
            }
            if (!this.driverMgr.process)
            {
                this.connectToDriver();
            }
            this.state = this.STATE_SCENE_INTERACTIVE;
            this.startPlaying();
            return;
        }// end function

        private function startPlaying() : void
        {
            this.mainClip = this.model.getCurrentInteractiveScene();
            this.clipContainer.addChild(this.mainClip);
            this.setInteractiveClipWidth(this.videoContainer.width);
            this.mouseIntensity = 2;
            this.movieSpeed = 1;
            stage.frameRate = 60;
            stage.addEventListener(Event.ENTER_FRAME, this.onEnterFrame);
            this.debug("startPlaying(), maxFramesToSkip=" + this.maxFramesToSkip);
            return;
        }// end function

        private function stopPlaying() : void
        {
            this.debug("stopPlaying()");
            if (this.state != this.STATE_SCENE_INTERACTIVE)
            {
                return;
            }
            stage.removeEventListener(Event.ENTER_FRAME, this.onEnterFrame);
            if (this.clipContainer.contains(this.mainClip))
            {
                this.clipContainer.removeChild(this.mainClip);
            }
            this.interactiveTxt.currentState = "idle";
            this.soundEngine.stopEverything();
            return;
        }// end function

        private function swapClips(param1:MovieClip) : void
        {
            if (this.clipContainer.contains(this.mainClip))
            {
                this.clipContainer.removeChild(this.mainClip);
            }
            this.mainClip = param1;
            this.clipContainer.addChild(this.mainClip);
            this.setInteractiveClipWidth(this.videoContainer.width);
            return;
        }// end function

        private function pauseInteractiveScene() : void
        {
            this.debug("pauseInteractiveScene()");
            if (this.state != this.STATE_SCENE_INTERACTIVE)
            {
                return;
            }
            stage.removeEventListener(Event.ENTER_FRAME, this.onEnterFrame);
            this.mainClip.stop();
            this.pausePos = this.mainClip.currentFrame;
            this.clipContainer.removeChild(this.mainClip);
            this.soundEngine.tick(0, (this.model.currentIndex + 1), false, ContentModel.playingAlternateContent);
            this.soundEngine.stopEverything();
            return;
        }// end function

        private function resumeInteractiveScene(event:TimeEvent = null) : void
        {
            this.debug("resumeInteractiveScene(), state=" + this.state);
            if (this.state != this.STATE_SCENE_IDLE)
            {
                return;
            }
            if (this.videoPlayer.playing)
            {
                this.stopVideo();
            }
            else
            {
                this.clearVideo();
            }
            var _loc_2:* = this.model.getCurrentSceneInfo();
            if (_loc_2.numContentFiles > 1)
            {
                this.mainClip = this.model.getCurrentInteractiveScene();
            }
            else if (this.mainClip.currentFrame != this.pausePos)
            {
                this.mainClip.gotoAndStop(this.pausePos);
            }
            currentState = this.STATE_SCENE_INTERACTIVE;
            this.clipContainer.addChild(this.mainClip);
            this.setInteractiveClipWidth(this.videoContainer.width);
            this.state = this.STATE_SCENE_INTERACTIVE;
            stage.addEventListener(Event.ENTER_FRAME, this.onEnterFrame);
            return;
        }// end function

        private function endScene(event:Event = null) : void
        {
            this.videoPlayer.pause();
            return;
        }// end function

        private function connectToDriver() : void
        {
            var _loc_1:String = null;
            this.debug("connectToDriver()");
            if (!NativeProcess.isSupported)
            {
                this.debug("No support for NativeProcesses!");
                return;
            }
            this.driverMgr = new DriverManager(this);
            if (Capabilities.os.toLowerCase().indexOf("win") > -1)
            {
                _loc_1 = "Win/vsdriver.exe";
                this.osFactor = this.osFactor - 0.5;
                this.isWindows = true;
            }
            else if (Capabilities.os.toLowerCase().indexOf("mac") > -1)
            {
                _loc_1 = "Mac/VSDriver";
                this.isMac = true;
            }
            if (!_loc_1)
            {
                this.debug("Not recognized as a Windows or Mac OS.");
                return;
            }
            this.driverMgr.addEventListener(VPlayerErrorEvent.DRIVER_ERROR, this.onDriverError);
            this.driverMgr.addEventListener(VPlayerErrorEvent.IO_ERROR, this.onDriverIoError);
            this.driverMgr.addEventListener(VPlayerErrorEvent.DATA_ERROR, this.onDataError);
            this.driverMgr.addEventListener(NativeProcessExitEvent.EXIT, this.onDriverExit);
            this.driverMgr.addEventListener(VPlayerDriverEvent.DATA, this.onDriverData);
            this.driverMgr.connectToDriver(_loc_1);
            return;
        }// end function

        private function onDriverError(event:VPlayerErrorEvent) : void
        {
            this.debug(event.toString());
            if (event.isFatal)
            {
                this.onDriverExit();
            }
            return;
        }// end function

        private function onDataError(event:VPlayerErrorEvent) : void
        {
            this.debug(event.toString());
            return;
        }// end function

        private function onDriverIoError(event:VPlayerErrorEvent) : void
        {
            this.debug(event.toString());
            return;
        }// end function

        private function onIOError(event:IOErrorEvent) : void
        {
            this.debug(event.toString());
            return;
        }// end function

        private function onDriverExit(event:NativeProcessExitEvent = null) : void
        {
            if (event)
            {
                this.debug("Process exited with " + event.exitCode);
            }
            else
            {
                this.debug("Process exited or courld not run.");
            }
            this.soundEngine.stopEverything();
            this.driverMgr.removeEventListener(VPlayerErrorEvent.DRIVER_ERROR, this.onDriverError);
            this.driverMgr.removeEventListener(VPlayerErrorEvent.IO_ERROR, this.onDriverIoError);
            this.driverMgr.removeEventListener(VPlayerErrorEvent.DATA_ERROR, this.onDataError);
            this.driverMgr.removeEventListener(NativeProcessExitEvent.EXIT, this.onDriverExit);
            this.driverMgr.removeEventListener(VPlayerDriverEvent.DATA, this.onDriverData);
            this.showDisconnectedAlert("exit");
            return;
        }// end function

        private function onWindowClosing(event:Event) : void
        {
            if (this.driverMgr)
            {
                this.driverMgr.closeDriver();
            }
            return;
        }// end function

        private function showDisconnectedAlert(param1:String = "") : void
        {
            this.movieSpeed = 1;
            this.mouseIntensity = 1;
            Alert.buttonWidth = 140;
            Alert.buttonHeight = 30;
            Alert.yesLabel = "Try Again";
            Alert.noLabel = "Quit";
            Alert.show("The VStroker device is not detected. Please plug in" + "\n" + "the USB receiver and click Try Again.", "DEVICE NOT CONNECTED", Alert.YES | Alert.NO, this, this.onDisconnectedAlertBtnClicked);
            Alert.yesLabel = "Yes";
            Alert.noLabel = "No";
            return;
        }// end function

        private function onDisconnectedAlertBtnClicked(event:CloseEvent) : void
        {
            if (event.detail == Alert.YES)
            {
                stage.focus = stage;
                this.connectToDriver();
            }
            else
            {
                this.exit();
            }
            return;
        }// end function

        private function changeAudioToLevel(param1:int) : void
        {
            if (this.changeAudioCounter > 69)
            {
                this.soundEngine.tick(param1, (this.model.currentIndex + 1), false, ContentModel.playingAlternateContent);
                this.changeAudioCounter = 0;
            }
            return;
        }// end function

        private function onDriverData(event:VPlayerDriverEvent) : void
        {
            this.distance = event.delta;
            if (this.distance == 0)
            {
                var _loc_2:String = this;
                _loc_2.zeroCount = this.zeroCount + 1;
                if (this.zeroCount++ > 5)
                {
                    if (this.runningAvg > 1)
                    {
                        this.runningAvg = this.runningAvg * this.decay;
                    }
                    if (this.zeroCount > 20)
                    {
                    }
                    if (!this.soundStopped)
                    {
                        this.debug("&&&&& 20 zero readings, stopping sound");
                        this.soundStopped = true;
                        this.soundEngine.tick(0, (this.model.currentIndex + 1), false, ContentModel.playingAlternateContent);
                    }
                    return;
                }
            }
            else
            {
                if (this.state == this.STATE_SCENE_IDLE)
                {
                }
                if (this.runningAvg >= this.resumeThreshold)
                {
                    this.resumeInteractiveScene();
                }
                else
                {
                    this.zeroCount = 0;
                    this.soundStopped = false;
                    this.runningAvg = this.runningAvg * 0.875 + this.distance * 0.125;
                }
            }
            return;
        }// end function

        private function onEnterFrame(event:Event = null) : void
        {
            var _loc_2:uint = 0;
            if (this.runningAvg < 7)
            {
                this.decay = 0.5;
            }
            else if (this.runningAvg < 60)
            {
                this.decay = 0.972;
            }
            else
            {
                this.decay = 0.965;
            }
            this.mouseIntensity = this.runningAvg * this.sensitivity;
            this.movieSpeed = this.responsiveness * this.mouseIntensity + this.movieSpeed * (1 - this.responsiveness);
            if (this.runningAvg < 7)
            {
                this.movieSpeed = 0;
                this.soundEngine.tick(0, (this.model.currentIndex + 1), false, ContentModel.playingAlternateContent);
                if (this.highSpeedTime > 0)
                {
                    _loc_2 = getTimer() - this.highSpeedTime;
                    this.debug("**** slowDownTime=" + _loc_2);
                    this.highSpeedTime = 0;
                }
                this.startIdleTimer();
            }
            else
            {
                this.stopIdleTimer();
                if (this.movieSpeed < 10)
                {
                    this.movieSpeed = 10;
                }
            }
            var _loc_3:String = this;
            var _loc_4:* = this.changeAudioCounter + 1;
            _loc_3.changeAudioCounter = _loc_4;
            this.soundEngine.fadeSounds();
            if (this.movieSpeed > this.MAX_MOVIE_SPEED)
            {
                var _loc_3:String = this;
                var _loc_4:* = this.mouseHideCounter + 1;
                _loc_3.mouseHideCounter = _loc_4;
                this.movieSpeed = this.MAX_MOVIE_SPEED;
                this.mouseIntensity = this.MAX_MOVIE_SPEED;
                this.highSpeedTime = getTimer();
                this.changeAudioToLevel(3);
            }
            else if (this.movieSpeed > this.MAX_MOVIE_SPEED - 5)
            {
                var _loc_3:String = this;
                var _loc_4:* = this.mouseHideCounter + 1;
                _loc_3.mouseHideCounter = _loc_4;
                this.changeAudioToLevel(3);
            }
            else if (this.movieSpeed > this.MAX_MOVIE_SPEED - 30)
            {
                var _loc_3:String = this;
                var _loc_4:* = this.mouseHideCounter + 1;
                _loc_3.mouseHideCounter = _loc_4;
                this.changeAudioToLevel(2);
            }
            else if (this.movieSpeed >= 10)
            {
                var _loc_3:String = this;
                var _loc_4:* = this.mouseHideCounter + 1;
                _loc_3.mouseHideCounter = _loc_4;
                this.changeAudioToLevel(1);
            }
            this.nextVideoFrame();
            if (this.isMeterVisible)
            {
                this.prevMeterValue = this.movementMeter.value;
                this.movementMeter.value = int(50 * this.mouseIntensity / this.MAX_MOVIE_SPEED * 0.1 + this.prevMeterValue * 0.9);
            }
            this.mouseIntensity = this.mouseIntensity * this.decay;
            if (this.mouseIntensity < 1)
            {
                this.mouseIntensity = 1;
            }
            this.movieSpeed = this.movieSpeed * this.decay;
            return;
        }// end function

        protected function startIdleTimer(param1:uint = 700) : void
        {
            if (!this.idleTimer.running)
            {
                this.idleTimer.delay = param1;
                this.idleTimer.addEventListener(TimerEvent.TIMER, this.onIdle);
                this.idleTimer.start();
            }
            return;
        }// end function

        protected function stopIdleTimer() : void
        {
            if (this.idleTimer.running)
            {
                this.idleTimer.stop();
                this.idleTimer.removeEventListener(TimerEvent.TIMER, this.onIdle);
            }
            return;
        }// end function

        protected function onIdle(event:TimerEvent) : void
        {
            if (this.idleTimer.running)
            {
                this.idleTimer.stop();
            }
            this.idleTimer.removeEventListener(TimerEvent.TIMER, this.onIdle);
            this.startSceneIdle();
            return;
        }// end function

        private function nextVideoFrame() : void
        {
            var _loc_1:Number = NaN;
            var _loc_2:int = 0;
            this.elapsed = getTimer() - this.prevTime;
            this.elapsedSum = this.elapsedSum + this.elapsed;
            var _loc_3:String = this;
            var _loc_4:* = this.tickSum + 1;
            _loc_3.tickSum = _loc_4;
            if (this.movieSpeed < 9)
            {
            }
            if (this.idleTimer.running)
            {
                _loc_1 = 2 * (this.elapsed / this.targetInterval * (this.movieSpeed / this.MAX_MOVIE_SPEED)) + this.remainder;
                if (this.boostMinSpeed)
                {
                    if (_loc_1 < 1)
                    {
                        _loc_1 = _loc_1 + 0.12;
                    }
                }
                if (_loc_1 > this.maxFramesToSkip)
                {
                    _loc_1 = this.maxFramesToSkip;
                }
                _loc_2 = int(_loc_1);
                this.remainder = _loc_1 - _loc_2;
                this.frameSum = this.frameSum + _loc_1;
                if (this.mainClip.currentFrame + _loc_2 >= this.mainClip.framesLoaded)
                {
                    this.debug("BACK TO ZERO");
                    this.mainClip.gotoAndStop(0);
                }
                else if (_loc_2 > 0)
                {
                    this.mainClip.gotoAndStop(this.mainClip.currentFrame + _loc_2);
                }
                if (this.elapsedSum > 1000)
                {
                    this.debug("}} elapsed=" + this.elapsedSum + ", frames=" + this.frameSum + ", ticks=" + this.tickSum + ", VFPS=" + this.frameSum * 1000 / this.elapsedSum);
                    var _loc_3:int = 0;
                    this.tickSum = 0;
                    var _loc_3:* = _loc_3;
                    this.frameSum = _loc_3;
                    this.elapsedSum = _loc_3;
                }
            }
            this.prevTime = getTimer();
            return;
        }// end function

        private function toggleFullScreen() : void
        {
            if (stage.displayState == StageDisplayState.NORMAL)
            {
                this.maximizeWindow();
            }
            else
            {
                this.normalizeWindow();
            }
            return;
        }// end function

        private function maximizeWindow() : void
        {
            stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
            stage.focus = stage;
            this.setVideoSize(new Point(stage.stageWidth, stage.stageHeight));
            return;
        }// end function

        private function onFullScreen(event:FullScreenEvent) : void
        {
            this.fullScreenBtn.selected = stage.displayState != StageDisplayState.NORMAL;
            if (event.fullScreen == false)
            {
                this.normalizeWindow();
            }
            this.resizeDisplay();
            return;
        }// end function

        private function normalizeWindow() : void
        {
            this.setVideoSize(this.vidSizes[0]);
            if (this.allowWindowing)
            {
                stage.displayState = StageDisplayState.NORMAL;
                this.width = this.videoContainer.width;
                if (stage.stageHeight > this.videoContainer.height + 58)
                {
                    this.height = this.videoContainer.height + 58;
                }
                else
                {
                    this.height = this.videoContainer.height;
                }
            }
            return;
        }// end function

        private function centerWindow() : void
        {
            if (this.videoContainer.width == this.vidSizes[0].x)
            {
            }
            return;
        }// end function

        private function getScreenRect() : Rectangle
        {
            var _loc_1:* = stage.nativeWindow.bounds;
            var _loc_2:* = Screen.getScreensForRectangle(_loc_1)[0];
            return _loc_2.bounds;
        }// end function

        private function resizeDisplay(event:Event = null) : void
        {
            this.debug("resizeDisplay()");
            this.controlPanelHolder.y = stage.stageHeight - 36;
            return;
        }// end function

        protected function volumeSlider_rollOutHandler() : void
        {
            this.Sequence2.play();
            return;
        }// end function

        protected function volumeSlider_changeHandler(event:Event) : void
        {
            this.globalVolume = this.volumeSlider.value;
            this.videoPlayer.volume = this.globalVolume;
            SoundMixer.soundTransform = new SoundTransform(this.globalVolume);
            this.debug("volume=" + this.globalVolume);
            return;
        }// end function

        private function toggleActive(param1:Boolean = true) : void
        {
            if (param1)
            {
                this.activeIndicator.currentState = "active";
            }
            else
            {
                this.activeIndicator.currentState = "idle";
            }
            return;
        }// end function

        private function changeSensitivity() : void
        {
            this.sensitivity = (0.5 + this.sensitivitySlider.value / this.osFactor) * 0.4;
            this.debug("=========== slider = " + this.sensitivitySlider.value + ", sensitivity = " + this.sensitivity);
            return;
        }// end function

        private function onPlayHeadUpdate(event:TimeEvent) : void
        {
            if (this.videoPlayer.playing)
            {
                if (this.videoPlayer.duration > 0)
                {
                    this.scrubber.value = int(100 * event.time / this.videoPlayer.duration);
                }
            }
            return;
        }// end function

        private function onScrubberChange(event:Event) : void
        {
            var _loc_2:Number = NaN;
            this.debug("onScrubberChange(), value=" + this.scrubber.value);
            if (this.videoPlayer)
            {
            }
            if (this.videoPlayer.duration > 0)
            {
                _loc_2 = this.scrubber.value / 100 * this.videoPlayer.duration;
                this.videoPlayer.seek(_loc_2);
            }
            return;
        }// end function

        public function getHelp(event:MouseEvent = null) : void
        {
            var _loc_2:* = new URLRequest("http://vstroker.com/VSGame_help.html");
            navigateToURL(_loc_2);
            return;
        }// end function

        private function onHotkey(event:KeyboardEvent) : void
        {
            switch(event.keyCode)
            {
                case Keyboard.SPACE:
                {
                    if (this.state == this.STATE_SCENE_INTRO)
                    {
                        this.interruptVideo();
                        this.stopVideo();
                        this.startInteractiveScene();
                    }
                    else
                    {
                        if (this.state == this.STATE_TITLE_ANIM)
                        {
                        }
                        if (this.titleAnimPlayer.source != null)
                        {
                            this.titleAnimComplete();
                        }
                    }
                    break;
                }
                case Keyboard.NUMPAD_0:
                case Keyboard.NUMBER_0:
                {
                    this.climaxBtn_clickHandler();
                    break;
                }
                case Keyboard.NUMPAD_1:
                case Keyboard.NUMBER_1:
                {
                    this.introBtn_clickHandler();
                    break;
                }
                case Keyboard.NUMPAD_2:
                case Keyboard.NUMBER_2:
                {
                    this.selectScene(2);
                    break;
                }
                case Keyboard.NUMPAD_3:
                case Keyboard.NUMBER_3:
                {
                    this.selectScene(3);
                    break;
                }
                case Keyboard.NUMPAD_4:
                case Keyboard.NUMBER_4:
                {
                    this.selectScene(4);
                    break;
                }
                case Keyboard.NUMPAD_5:
                case Keyboard.NUMBER_5:
                {
                    this.selectScene(5);
                    break;
                }
                case Keyboard.NUMPAD_6:
                case Keyboard.NUMBER_6:
                {
                    this.selectScene(6);
                    break;
                }
                case Keyboard.NUMPAD_7:
                case Keyboard.NUMBER_7:
                {
                    this.selectScene(7);
                    break;
                }
                case Keyboard.NUMPAD_8:
                case Keyboard.NUMBER_8:
                {
                    this.selectScene(8);
                    break;
                }
                case Keyboard.NUMPAD_9:
                case Keyboard.NUMBER_9:
                {
                    this.selectScene(9);
                    break;
                }
                case Keyboard.I:
                {
                    this.startSceneIdle();
                    break;
                }
                case Keyboard.M:
                {
                    this.debug("====================== MARKER ========================");
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }// end function

        protected function volumeButton_clickHandler() : void
        {
            var _loc_1:* = currentState;
            this.Sequence3.play();
            return;
        }// end function

        protected function instructions_clickHandler(event:Event = null) : void
        {
            if (currentState == this.STATE_INSTRUCTIONS)
            {
                currentState = this.STATE_INITIAL;
                this.initUi();
            }
            return;
        }// end function

        protected function gearButton_clickHandler() : void
        {
            var _loc_1:* = currentState;
            if (_loc_1 != this.STATE_SCENE_INTERACTIVE)
            {
            }
            if (_loc_1 == this.STATE_PLAYBACK)
            {
                currentState = this.STATE_INSTRUCTIONS;
                this.soundEngine.stopEverything();
            }
            return;
        }// end function

        protected function rewindBtn_clickHandler() : void
        {
            var _loc_1:Number = NaN;
            if (currentState == this.STATE_PLAYBACK)
            {
                _loc_1 = this.videoPlayer.currentTime - this.rewindTime;
                if (_loc_1 < 0)
                {
                    _loc_1 = 0;
                }
                this.videoPlayer.seek(_loc_1);
            }
            return;
        }// end function

        protected function pauseButton_clickHandler() : void
        {
            if (currentState == this.STATE_PLAYBACK)
            {
                if (this.videoPlayer.playing)
                {
                    this.videoPlayer.pause();
                    this.pauseBtn.selected = true;
                }
                else
                {
                    this.videoPlayer.play();
                    this.pauseBtn.selected = false;
                }
            }
            return;
        }// end function

        protected function forwardButton_clickHandler() : void
        {
            var _loc_1:Number = NaN;
            if (currentState == this.STATE_PLAYBACK)
            {
                _loc_1 = this.videoPlayer.currentTime + this.rewindTime;
                if (_loc_1 > this.videoPlayer.duration)
                {
                    _loc_1 = this.videoPlayer.duration;
                }
                this.videoPlayer.seek(_loc_1);
            }
            return;
        }// end function

        protected function introBtn_clickHandler() : void
        {
            this.debug("introBtn_clickHandler()");
            this.stopPlaying();
            this.startIntro();
            return;
        }// end function

        protected function climaxBtn_clickHandler() : void
        {
            this.debug("climaxBtn_clickHandler()");
            this.stopPlaying();
            this.startSceneClimax();
            return;
        }// end function

        protected function selectRadioBtn(param1:RadioButton = null) : void
        {
            this.debug("selectRadioBtn(" + param1 + ")");
            var _loc_2:* = this.sceneBtn2.group;
            var _loc_3:* = _loc_2.selection;
            if (param1 == null)
            {
                if (_loc_3)
                {
                    _loc_3.selected = false;
                }
            }
            else if (_loc_3 != param1)
            {
                _loc_2.selection = param1;
            }
            return;
        }// end function

        protected function windowBtn_clickHandler() : void
        {
            this.toggleFullScreen();
            return;
        }// end function

        protected function onSceneBtnRollOver(event:MouseEvent) : void
        {
            var _loc_3:int = 0;
            this.previewPane.currentState = "visible";
            var _loc_2:* = event.target as ButtonBase;
            if (_loc_2)
            {
                _loc_3 = parseInt(_loc_2.label);
                trace("rolled over btn " + _loc_2.label + ", sceneNum=" + _loc_3);
                if (!isNaN(_loc_3))
                {
                    this.showSceneThumb(_loc_3);
                }
                if (_loc_3 > 1)
                {
                    this.interactiveTxt.currentState = "selected";
                }
            }
            return;
        }// end function

        protected function showSceneThumb(param1:int) : void
        {
            var _loc_2:String = null;
            var _loc_3:SceneInfo = null;
            this.debug("showSceneThumb{" + param1 + ")");
            if (param1 < 0)
            {
                return;
            }
            if (param1 == 0)
            {
                _loc_2 = this.baseUrl + "thumbs/climax.jpg";
            }
            else if (param1 == 1)
            {
                _loc_2 = this.baseUrl + "thumbs/intro.jpg";
            }
            else
            {
                _loc_3 = this.model.scenes[param1 - 2];
                _loc_2 = _loc_3.thumbUrl;
            }
            this.debug("thumbUrl = " + _loc_2);
            if (_loc_2)
            {
                this.previewPane.thumbImage.source = _loc_2;
            }
            return;
        }// end function

        protected function onSceneBtnRollOut(event:MouseEvent) : void
        {
            this.previewPane.currentState = "hidden";
            if (this.state != this.STATE_SCENE_INTERACTIVE)
            {
                this.interactiveTxt.currentState = "idle";
            }
            return;
        }// end function

        protected function onSceneBtnClick(event:MouseEvent) : void
        {
            var _loc_3:int = 0;
            var _loc_2:* = event.target as ButtonBase;
            if (_loc_2)
            {
                this.debug("clicked btn " + _loc_2.label);
                _loc_3 = parseInt(_loc_2.label);
                if (!isNaN(_loc_3))
                {
                    this.selectScene(_loc_3);
                }
            }
            this.previewPane.currentState = "hidden";
            return;
        }// end function

        public function toggleControlPanel(event:Event = null) : void
        {
            this.debug("toggleControlPanel(), minimized=" + this.controlPanelMinimized);
            if (!this.controlPanelMinimized)
            {
                TweenLite.to(this.controlPanel, 1.6, {y:40, onComplete:this.onControlPanelMinimized});
                TweenLite.to(this.screenBar, 1.6, {alpha:0});
            }
            else
            {
                if (this.stage.hasEventListener(MouseEvent.MOUSE_MOVE))
                {
                    this.stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.onMouseMove);
                }
                TweenLite.to(this.controlPanel, 1.6, {y:0, onComplete:this.onControlPanelRestored});
                TweenLite.to(this.screenBar, 1.6, {alpha:1});
            }
            return;
        }// end function

        protected function onMouseMove(event:MouseEvent) : void
        {
            this.debug("onMouseMove()");
            if (this.controlPanelMinimized)
            {
                this.toggleControlPanel();
            }
            else if (this.mouseTimer.running)
            {
                this.resetMouseTimer();
            }
            return;
        }// end function

        protected function onMouseIdle(event:TimerEvent) : void
        {
            this.debug("onMouseIdle()");
            if (!this.controlPanelMinimized)
            {
                this.toggleControlPanel();
            }
            return;
        }// end function

        protected function onControlPanelMinimized() : void
        {
            this.debug("onControlPanelMinimized()");
            this.controlPanelMinimized = true;
            if (!this.stage.hasEventListener(MouseEvent.MOUSE_MOVE))
            {
                this.stage.addEventListener(MouseEvent.MOUSE_MOVE, this.onMouseMove);
            }
            return;
        }// end function

        protected function onControlPanelRestored() : void
        {
            this.controlPanelMinimized = false;
            this.resetMouseTimer();
            return;
        }// end function

        protected function createMouseTimer(param1:int = 3000) : void
        {
            this.mouseTimer = new Timer(param1, 1);
            this.mouseTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.onMouseIdle);
            return;
        }// end function

        protected function resetMouseTimer() : void
        {
            this.mouseTimer.reset();
            this.mouseTimer.start();
            return;
        }// end function

        private function addDebugConsole() : void
        {
            return;
        }// end function

        public function debug(param1:String, param2:String = "", param3:Boolean = false) : void
        {
            trace(param1);
            return;
        }// end function

        protected function vibroBtn_clickHandler(event:MouseEvent) : void
        {
            this.osFactor = this.originalOsFactor;
            this.resumeThreshold = 15;
            this.changeSensitivity();
            return;
        }// end function

        protected function maxSpeedBtn_clickHandler(event:MouseEvent = null) : void
        {
            this.adjustMaxSpeed(this.maxSpeedBtn.selected);
            this.debug("maxSpeedBtn_clickHandler(), selected=" + this.maxSpeedBtn.selected + ", maxFrames=" + this.maxFramesToSkip);
            return;
        }// end function

        protected function adjustMaxSpeed(param1:Boolean = true) : void
        {
            if (param1)
            {
                this.MAX_MOVIE_SPEED = this.MAX_MOVIE_SPEED + 15;
                (this.maxFramesToSkip + 1);
            }
            else
            {
                this.MAX_MOVIE_SPEED = this.MAX_MOVIE_SPEED - 15;
                (this.maxFramesToSkip - 1);
            }
            return;
        }// end function

        protected function fullScreenBtn_clickHandler(event:MouseEvent) : void
        {
            this.maximizeWindow();
            this.normalSizeBtn.selected = false;
            return;
        }// end function

        protected function normalSizeBtn_clickHandler(event:MouseEvent) : void
        {
            this.normalizeWindow();
            this.fullScreenBtn.selected = false;
            return;
        }// end function

        protected function closeAppBtn_clickHandler(event:MouseEvent) : void
        {
            exit();
            return;
        }// end function

        private function _VPlayerLoader_Parallel1_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Parallel2_i()];
            this.Sequence2 = _loc_1;
            BindingManager.executeBindings(this, "Sequence2", this.Sequence2);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel2_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade1_c(), this._VPlayerLoader_SetAction1_c()];
            this._VPlayerLoader_Parallel2 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel2", this._VPlayerLoader_Parallel2);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade1_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.alphaTo = 0;
            _loc_1.duration = 300;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_SetAction1_c() : SetAction
        {
            var _loc_1:* = new SetAction();
            _loc_1.property = "alpha";
            _loc_1.startDelay = 300;
            _loc_1.value = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel3_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Parallel4_i()];
            this.Sequence3 = _loc_1;
            BindingManager.executeBindings(this, "Sequence3", this.Sequence3);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel4_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade2_c(), this._VPlayerLoader_SetAction2_c()];
            this._VPlayerLoader_Parallel4 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel4", this._VPlayerLoader_Parallel4);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade2_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.alphaTo = 1;
            _loc_1.duration = 300;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_SetAction2_c() : SetAction
        {
            var _loc_1:* = new SetAction();
            _loc_1.property = "alpha";
            _loc_1.startDelay = 300;
            _loc_1.value = 1;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_DesignLayer1_i() : DesignLayer
        {
            var _loc_1:* = new DesignLayer();
            _loc_1.initialized(this, "designlayer4");
            this.designlayer4 = _loc_1;
            BindingManager.executeBindings(this, "designlayer4", this.designlayer4);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_DesignLayer2_i() : DesignLayer
        {
            var _loc_1:* = new DesignLayer();
            _loc_1.initialized(this, "designlayer5");
            this.designlayer5 = _loc_1;
            BindingManager.executeBindings(this, "designlayer5", this.designlayer5);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_DesignLayer3_i() : DesignLayer
        {
            var _loc_1:* = new DesignLayer();
            _loc_1.initialized(this, "designlayer8");
            this.designlayer8 = _loc_1;
            BindingManager.executeBindings(this, "designlayer8", this.designlayer8);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Transition1_c() : Transition
        {
            var _loc_1:* = new Transition();
            _loc_1.autoReverse = true;
            _loc_1.fromState = "playback";
            _loc_1.toState = "loading";
            _loc_1.effect = this._VPlayerLoader_Parallel5_c();
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel5_c() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Parallel6_i(), this._VPlayerLoader_Parallel7_i(), this._VPlayerLoader_Parallel8_i(), this._VPlayerLoader_Parallel9_i(), this._VPlayerLoader_Parallel10_i(), this._VPlayerLoader_Parallel11_i(), this._VPlayerLoader_Parallel12_i(), this._VPlayerLoader_Parallel13_i(), this._VPlayerLoader_Parallel14_i(), this._VPlayerLoader_Parallel15_i(), this._VPlayerLoader_Parallel16_i(), this._VPlayerLoader_Parallel17_i(), this._VPlayerLoader_Parallel18_i(), this._VPlayerLoader_Parallel19_i(), this._VPlayerLoader_Parallel20_i(), this._VPlayerLoader_Parallel21_i(), this._VPlayerLoader_Parallel22_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel6_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade3_c()];
            this._VPlayerLoader_Parallel6 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel6", this._VPlayerLoader_Parallel6);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade3_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel7_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade4_c()];
            this._VPlayerLoader_Parallel7 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel7", this._VPlayerLoader_Parallel7);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade4_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel8_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade5_c()];
            this._VPlayerLoader_Parallel8 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel8", this._VPlayerLoader_Parallel8);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade5_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel9_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade6_c()];
            this._VPlayerLoader_Parallel9 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel9", this._VPlayerLoader_Parallel9);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade6_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel10_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade7_c()];
            this._VPlayerLoader_Parallel10 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel10", this._VPlayerLoader_Parallel10);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade7_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel11_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade8_c()];
            this._VPlayerLoader_Parallel11 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel11", this._VPlayerLoader_Parallel11);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade8_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel12_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade9_c()];
            this._VPlayerLoader_Parallel12 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel12", this._VPlayerLoader_Parallel12);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade9_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel13_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade10_c()];
            this._VPlayerLoader_Parallel13 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel13", this._VPlayerLoader_Parallel13);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade10_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel14_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade11_c()];
            this._VPlayerLoader_Parallel14 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel14", this._VPlayerLoader_Parallel14);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade11_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel15_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade12_c()];
            this._VPlayerLoader_Parallel15 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel15", this._VPlayerLoader_Parallel15);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade12_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel16_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade13_c()];
            this._VPlayerLoader_Parallel16 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel16", this._VPlayerLoader_Parallel16);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade13_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel17_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade14_c()];
            this._VPlayerLoader_Parallel17 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel17", this._VPlayerLoader_Parallel17);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade14_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel18_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade15_c()];
            this._VPlayerLoader_Parallel18 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel18", this._VPlayerLoader_Parallel18);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade15_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel19_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade16_c()];
            this._VPlayerLoader_Parallel19 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel19", this._VPlayerLoader_Parallel19);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade16_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel20_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade17_c()];
            this._VPlayerLoader_Parallel20 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel20", this._VPlayerLoader_Parallel20);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade17_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel21_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade18_c()];
            this._VPlayerLoader_Parallel21 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel21", this._VPlayerLoader_Parallel21);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade18_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel22_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade19_c()];
            this._VPlayerLoader_Parallel22 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel22", this._VPlayerLoader_Parallel22);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade19_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Transition2_c() : Transition
        {
            var _loc_1:* = new Transition();
            _loc_1.autoReverse = true;
            _loc_1.fromState = "interactive";
            _loc_1.toState = "loading";
            _loc_1.effect = this._VPlayerLoader_Parallel23_c();
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel23_c() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Parallel24_i(), this._VPlayerLoader_Parallel25_i(), this._VPlayerLoader_Parallel26_i(), this._VPlayerLoader_Parallel27_i(), this._VPlayerLoader_Parallel28_i(), this._VPlayerLoader_Parallel29_i(), this._VPlayerLoader_Parallel30_i(), this._VPlayerLoader_Parallel31_i(), this._VPlayerLoader_Parallel32_i(), this._VPlayerLoader_Parallel33_i(), this._VPlayerLoader_Parallel34_i(), this._VPlayerLoader_Parallel35_i(), this._VPlayerLoader_Parallel36_i(), this._VPlayerLoader_Parallel37_i(), this._VPlayerLoader_Parallel38_i(), this._VPlayerLoader_Parallel39_i(), this._VPlayerLoader_Parallel40_i(), this._VPlayerLoader_Parallel41_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel24_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade20_c()];
            this._VPlayerLoader_Parallel24 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel24", this._VPlayerLoader_Parallel24);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade20_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel25_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade21_c()];
            this._VPlayerLoader_Parallel25 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel25", this._VPlayerLoader_Parallel25);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade21_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel26_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade22_c()];
            this._VPlayerLoader_Parallel26 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel26", this._VPlayerLoader_Parallel26);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade22_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel27_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade23_c()];
            this._VPlayerLoader_Parallel27 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel27", this._VPlayerLoader_Parallel27);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade23_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel28_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade24_c()];
            this._VPlayerLoader_Parallel28 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel28", this._VPlayerLoader_Parallel28);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade24_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel29_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade25_c()];
            this._VPlayerLoader_Parallel29 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel29", this._VPlayerLoader_Parallel29);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade25_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel30_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade26_c()];
            this._VPlayerLoader_Parallel30 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel30", this._VPlayerLoader_Parallel30);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade26_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel31_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade27_c()];
            this._VPlayerLoader_Parallel31 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel31", this._VPlayerLoader_Parallel31);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade27_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel32_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade28_c()];
            this._VPlayerLoader_Parallel32 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel32", this._VPlayerLoader_Parallel32);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade28_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel33_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade29_c()];
            this._VPlayerLoader_Parallel33 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel33", this._VPlayerLoader_Parallel33);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade29_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel34_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade30_c()];
            this._VPlayerLoader_Parallel34 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel34", this._VPlayerLoader_Parallel34);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade30_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel35_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade31_c()];
            this._VPlayerLoader_Parallel35 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel35", this._VPlayerLoader_Parallel35);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade31_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel36_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade32_c()];
            this._VPlayerLoader_Parallel36 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel36", this._VPlayerLoader_Parallel36);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade32_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel37_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade33_c()];
            this._VPlayerLoader_Parallel37 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel37", this._VPlayerLoader_Parallel37);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade33_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel38_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade34_c()];
            this._VPlayerLoader_Parallel38 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel38", this._VPlayerLoader_Parallel38);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade34_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel39_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade35_c()];
            this._VPlayerLoader_Parallel39 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel39", this._VPlayerLoader_Parallel39);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade35_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel40_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade36_c()];
            this._VPlayerLoader_Parallel40 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel40", this._VPlayerLoader_Parallel40);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade36_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel41_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade37_c()];
            this._VPlayerLoader_Parallel41 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel41", this._VPlayerLoader_Parallel41);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade37_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Transition3_c() : Transition
        {
            var _loc_1:* = new Transition();
            _loc_1.autoReverse = true;
            _loc_1.fromState = "initial";
            _loc_1.toState = "loading";
            _loc_1.effect = this._VPlayerLoader_Parallel42_c();
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel42_c() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Parallel43_i(), this._VPlayerLoader_Parallel44_i(), this._VPlayerLoader_Parallel45_i(), this._VPlayerLoader_Parallel46_i(), this._VPlayerLoader_Parallel47_i(), this._VPlayerLoader_Parallel48_i(), this._VPlayerLoader_Parallel49_i(), this._VPlayerLoader_Parallel50_i(), this._VPlayerLoader_Parallel51_i(), this._VPlayerLoader_Parallel52_i(), this._VPlayerLoader_Parallel53_i(), this._VPlayerLoader_Parallel54_i(), this._VPlayerLoader_Parallel55_i(), this._VPlayerLoader_Parallel56_i(), this._VPlayerLoader_Parallel57_i(), this._VPlayerLoader_Parallel58_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel43_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade38_c(), this._VPlayerLoader_Move1_c()];
            this._VPlayerLoader_Parallel43 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel43", this._VPlayerLoader_Parallel43);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade38_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Move1_c() : Move
        {
            var _loc_1:* = new Move();
            _loc_1.duration = 0;
            _loc_1.autoCenterTransform = true;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel44_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade39_c()];
            this._VPlayerLoader_Parallel44 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel44", this._VPlayerLoader_Parallel44);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade39_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel45_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade40_c(), this._VPlayerLoader_Move2_c()];
            this._VPlayerLoader_Parallel45 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel45", this._VPlayerLoader_Parallel45);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade40_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Move2_c() : Move
        {
            var _loc_1:* = new Move();
            _loc_1.duration = 0;
            _loc_1.autoCenterTransform = true;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel46_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade41_c()];
            this._VPlayerLoader_Parallel46 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel46", this._VPlayerLoader_Parallel46);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade41_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel47_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade42_c(), this._VPlayerLoader_Move3_c()];
            this._VPlayerLoader_Parallel47 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel47", this._VPlayerLoader_Parallel47);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade42_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Move3_c() : Move
        {
            var _loc_1:* = new Move();
            _loc_1.duration = 0;
            _loc_1.autoCenterTransform = true;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel48_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade43_c()];
            this._VPlayerLoader_Parallel48 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel48", this._VPlayerLoader_Parallel48);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade43_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel49_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade44_c()];
            this._VPlayerLoader_Parallel49 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel49", this._VPlayerLoader_Parallel49);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade44_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel50_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade45_c()];
            this._VPlayerLoader_Parallel50 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel50", this._VPlayerLoader_Parallel50);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade45_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel51_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade46_c()];
            this._VPlayerLoader_Parallel51 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel51", this._VPlayerLoader_Parallel51);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade46_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel52_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade47_c()];
            this._VPlayerLoader_Parallel52 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel52", this._VPlayerLoader_Parallel52);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade47_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel53_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade48_c()];
            this._VPlayerLoader_Parallel53 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel53", this._VPlayerLoader_Parallel53);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade48_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel54_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade49_c()];
            this._VPlayerLoader_Parallel54 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel54", this._VPlayerLoader_Parallel54);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade49_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel55_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade50_c()];
            this._VPlayerLoader_Parallel55 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel55", this._VPlayerLoader_Parallel55);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade50_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel56_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade51_c()];
            this._VPlayerLoader_Parallel56 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel56", this._VPlayerLoader_Parallel56);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade51_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel57_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade52_c()];
            this._VPlayerLoader_Parallel57 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel57", this._VPlayerLoader_Parallel57);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade52_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel58_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade53_c()];
            this._VPlayerLoader_Parallel58 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel58", this._VPlayerLoader_Parallel58);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade53_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Transition4_c() : Transition
        {
            var _loc_1:* = new Transition();
            _loc_1.autoReverse = true;
            _loc_1.fromState = "loading";
            _loc_1.toState = "initial";
            _loc_1.effect = this._VPlayerLoader_Parallel59_c();
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel59_c() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Parallel60_i(), this._VPlayerLoader_Parallel61_i(), this._VPlayerLoader_Parallel62_i(), this._VPlayerLoader_Parallel63_i(), this._VPlayerLoader_Parallel64_i(), this._VPlayerLoader_Parallel65_i(), this._VPlayerLoader_Parallel66_i(), this._VPlayerLoader_Parallel67_i(), this._VPlayerLoader_Parallel68_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel60_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade54_c()];
            this._VPlayerLoader_Parallel60 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel60", this._VPlayerLoader_Parallel60);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade54_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel61_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade55_c()];
            this._VPlayerLoader_Parallel61 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel61", this._VPlayerLoader_Parallel61);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade55_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel62_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade56_c()];
            this._VPlayerLoader_Parallel62 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel62", this._VPlayerLoader_Parallel62);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade56_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel63_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade57_c()];
            this._VPlayerLoader_Parallel63 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel63", this._VPlayerLoader_Parallel63);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade57_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel64_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade58_c(), this._VPlayerLoader_Move4_c()];
            this._VPlayerLoader_Parallel64 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel64", this._VPlayerLoader_Parallel64);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade58_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Move4_c() : Move
        {
            var _loc_1:* = new Move();
            _loc_1.autoCenterTransform = true;
            _loc_1.duration = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel65_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade59_c()];
            this._VPlayerLoader_Parallel65 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel65", this._VPlayerLoader_Parallel65);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade59_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel66_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade60_c()];
            this._VPlayerLoader_Parallel66 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel66", this._VPlayerLoader_Parallel66);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade60_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel67_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade61_c()];
            this._VPlayerLoader_Parallel67 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel67", this._VPlayerLoader_Parallel67);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade61_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel68_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade62_c()];
            this._VPlayerLoader_Parallel68 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel68", this._VPlayerLoader_Parallel68);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade62_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Transition5_c() : Transition
        {
            var _loc_1:* = new Transition();
            _loc_1.autoReverse = true;
            _loc_1.fromState = "loading";
            _loc_1.toState = "playback";
            _loc_1.effect = this._VPlayerLoader_Parallel69_c();
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel69_c() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Parallel70_i(), this._VPlayerLoader_Parallel71_i(), this._VPlayerLoader_Parallel72_i(), this._VPlayerLoader_Parallel73_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel70_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade63_c()];
            this._VPlayerLoader_Parallel70 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel70", this._VPlayerLoader_Parallel70);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade63_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel71_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade64_c()];
            this._VPlayerLoader_Parallel71 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel71", this._VPlayerLoader_Parallel71);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade64_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel72_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade65_c()];
            this._VPlayerLoader_Parallel72 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel72", this._VPlayerLoader_Parallel72);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade65_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel73_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade66_c()];
            this._VPlayerLoader_Parallel73 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel73", this._VPlayerLoader_Parallel73);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade66_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            _loc_1.startDelay = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Transition6_c() : Transition
        {
            var _loc_1:* = new Transition();
            _loc_1.autoReverse = true;
            _loc_1.fromState = "initial";
            _loc_1.toState = "playback";
            _loc_1.effect = this._VPlayerLoader_Parallel74_c();
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel74_c() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Parallel75_i(), this._VPlayerLoader_Parallel76_i(), this._VPlayerLoader_Parallel77_i(), this._VPlayerLoader_Parallel78_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel75_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade67_c()];
            this._VPlayerLoader_Parallel75 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel75", this._VPlayerLoader_Parallel75);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade67_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel76_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade68_c()];
            this._VPlayerLoader_Parallel76 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel76", this._VPlayerLoader_Parallel76);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade68_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel77_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Fade69_c()];
            this._VPlayerLoader_Parallel77 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel77", this._VPlayerLoader_Parallel77);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Fade69_c() : Fade
        {
            var _loc_1:* = new Fade();
            _loc_1.duration = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Parallel78_i() : Parallel
        {
            var _loc_1:* = new Parallel();
            _loc_1.children = [this._VPlayerLoader_Move5_c()];
            this._VPlayerLoader_Parallel78 = _loc_1;
            BindingManager.executeBindings(this, "_VPlayerLoader_Parallel78", this._VPlayerLoader_Parallel78);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Move5_c() : Move
        {
            var _loc_1:* = new Move();
            _loc_1.autoCenterTransform = true;
            _loc_1.duration = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Array81_c() : Array
        {
            var _loc_1:Array = [this._VPlayerLoader_SplashScreen1_i(), this._VPlayerLoader_Group1_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_SplashScreen1_i() : SplashScreen
        {
            var _loc_1:* = new SplashScreen();
            _loc_1.x = 0;
            _loc_1.y = 0;
            _loc_1.id = "splashscreen1";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.splashscreen1 = _loc_1;
            BindingManager.executeBindings(this, "splashscreen1", this.splashscreen1);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_LoginScreen1_i() : LoginScreen
        {
            var _loc_1:* = new LoginScreen();
            _loc_1.x = 0;
            _loc_1.y = 0;
            _loc_1.id = "loginScreen";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.loginScreen = _loc_1;
            BindingManager.executeBindings(this, "loginScreen", this.loginScreen);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_DisclaimerPanel1_i() : DisclaimerPanel
        {
            var _loc_1:* = new DisclaimerPanel();
            _loc_1.buttonMode = false;
            _loc_1.visible = false;
            _loc_1.horizontalCenter = 0;
            _loc_1.verticalCenter = 0;
            _loc_1.id = "disclaimerPanel";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.disclaimerPanel = _loc_1;
            BindingManager.executeBindings(this, "disclaimerPanel", this.disclaimerPanel);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_InstructionsPanel1_i() : InstructionsPanel
        {
            var _loc_1:* = new InstructionsPanel();
            _loc_1.buttonMode = true;
            _loc_1.visible = true;
            _loc_1.horizontalCenter = 0;
            _loc_1.verticalCenter = 0;
            _loc_1.id = "instructionsPanel";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.instructionsPanel = _loc_1;
            BindingManager.executeBindings(this, "instructionsPanel", this.instructionsPanel);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Group1_i() : Group
        {
            var _loc_1:* = new Group();
            _loc_1.width = 1280;
            _loc_1.height = 720;
            _loc_1.horizontalCenter = 0;
            _loc_1.verticalCenter = 0;
            _loc_1.layout = this._VPlayerLoader_BasicLayout1_c();
            _loc_1.mxmlContent = [];
            _loc_1.id = "videoContainer";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.videoContainer = _loc_1;
            BindingManager.executeBindings(this, "videoContainer", this.videoContainer);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_BasicLayout1_c() : BasicLayout
        {
            var _loc_1:* = new BasicLayout();
            return _loc_1;
        }// end function

        private function _VPlayerLoader_SWFLoader1_i() : SWFLoader
        {
            var _loc_1:* = new SWFLoader();
            _loc_1.visible = true;
            _loc_1.autoLoad = false;
            _loc_1.maintainAspectRatio = true;
            _loc_1.loadForCompatibility = true;
            _loc_1.verticalCenter = 0;
            _loc_1.horizontalCenter = 0;
            _loc_1.left = 0;
            _loc_1.top = 0;
            _loc_1.bottom = 0;
            _loc_1.right = 0;
            _loc_1.id = "titleAnimPlayer";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.titleAnimPlayer = _loc_1;
            BindingManager.executeBindings(this, "titleAnimPlayer", this.titleAnimPlayer);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_VideoDisplay1_i() : VideoDisplay
        {
            var _loc_1:* = new VideoDisplay();
            _loc_1.scaleMode = "letterbox";
            _loc_1.autoPlay = true;
            _loc_1.autoRewind = true;
            _loc_1.verticalCenter = 0;
            _loc_1.horizontalCenter = 0;
            _loc_1.left = 0;
            _loc_1.top = 0;
            _loc_1.bottom = 0;
            _loc_1.right = 0;
            _loc_1.id = "videoPlayer";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.videoPlayer = _loc_1;
            BindingManager.executeBindings(this, "videoPlayer", this.videoPlayer);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_UIComponent1_i() : UIComponent
        {
            var _loc_1:* = new UIComponent();
            _loc_1.left = 0;
            _loc_1.top = 0;
            _loc_1.bottom = 0;
            _loc_1.right = 0;
            _loc_1.horizontalCenter = 0;
            _loc_1.verticalCenter = 0;
            _loc_1.id = "clipContainer";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.clipContainer = _loc_1;
            BindingManager.executeBindings(this, "clipContainer", this.clipContainer);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_SkinnableContainer1_i() : SkinnableContainer
        {
            var _loc_1:* = new SkinnableContainer();
            _loc_1.top = 0;
            _loc_1.right = 0;
            _loc_1.layout = this._VPlayerLoader_HorizontalLayout1_c();
            _loc_1.mxmlContentFactory = new DeferredInstanceFromFunction(this._VPlayerLoader_Array83_c);
            _loc_1.id = "screenBar";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.screenBar = _loc_1;
            BindingManager.executeBindings(this, "screenBar", this.screenBar);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_HorizontalLayout1_c() : HorizontalLayout
        {
            var _loc_1:* = new HorizontalLayout();
            _loc_1.gap = 0;
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Array83_c() : Array
        {
            var _loc_1:Array = [];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_ToggleButton1_i() : ToggleButton
        {
            var _loc_1:* = new ToggleButton();
            _loc_1.focusEnabled = false;
            _loc_1.visible = true;
            _loc_1.setStyle("skinClass", NormalSizeButton);
            _loc_1.addEventListener("click", this.__normalSizeBtn_click);
            _loc_1.id = "normalSizeBtn";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.normalSizeBtn = _loc_1;
            BindingManager.executeBindings(this, "normalSizeBtn", this.normalSizeBtn);
            return _loc_1;
        }// end function

        public function __normalSizeBtn_click(event:MouseEvent) : void
        {
            this.normalSizeBtn_clickHandler(event);
            return;
        }// end function

        private function _VPlayerLoader_ToggleButton2_i() : ToggleButton
        {
            var _loc_1:ToggleButton = null;
            _loc_1 = new ToggleButton();
            _loc_1.focusEnabled = false;
            _loc_1.visible = true;
            _loc_1.setStyle("skinClass", FullScreenButton);
            _loc_1.addEventListener("click", this.__fullScreenBtn_click);
            _loc_1.id = "fullScreenBtn";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.fullScreenBtn = _loc_1;
            BindingManager.executeBindings(this, "fullScreenBtn", this.fullScreenBtn);
            return _loc_1;
        }// end function

        public function __fullScreenBtn_click(event:MouseEvent) : void
        {
            this.fullScreenBtn_clickHandler(event);
            return;
        }// end function

        private function _VPlayerLoader_ToggleButton3_i() : ToggleButton
        {
            var _loc_1:ToggleButton = null;
            _loc_1 = new ToggleButton();
            _loc_1.focusEnabled = false;
            _loc_1.visible = true;
            _loc_1.setStyle("skinClass", CloseAppButton);
            _loc_1.addEventListener("click", this.__closeAppBtn_click);
            _loc_1.id = "closeAppBtn";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.closeAppBtn = _loc_1;
            BindingManager.executeBindings(this, "closeAppBtn", this.closeAppBtn);
            return _loc_1;
        }// end function

        public function __closeAppBtn_click(event:MouseEvent) : void
        {
            this.closeAppBtn_clickHandler(event);
            return;
        }// end function

        private function _VPlayerLoader_SkinnableContainer2_i() : SkinnableContainer
        {
            var _loc_1:SkinnableContainer = null;
            _loc_1 = new SkinnableContainer();
            _loc_1.left = 0;
            _loc_1.right = 0;
            _loc_1.mxmlContentFactory = new DeferredInstanceFromFunction(this._VPlayerLoader_Array84_c);
            _loc_1.id = "controlPanelHolder";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.controlPanelHolder = _loc_1;
            BindingManager.executeBindings(this, "controlPanelHolder", this.controlPanelHolder);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Array84_c() : Array
        {
            var _loc_1:Array = null;
            _loc_1 = [];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_SkinnableContainer3_i() : SkinnableContainer
        {
            var _loc_1:SkinnableContainer = null;
            _loc_1 = new SkinnableContainer();
            _loc_1.left = 0;
            _loc_1.right = 0;
            _loc_1.y = 0;
            _loc_1.mxmlContentFactory = new DeferredInstanceFromFunction(this._VPlayerLoader_Array85_c);
            _loc_1.id = "controlPanel";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.controlPanel = _loc_1;
            BindingManager.executeBindings(this, "controlPanel", this.controlPanel);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Array85_c() : Array
        {
            var _loc_1:Array = null;
            _loc_1 = [this._VPlayerLoader_BitmapImage1_i(), this._VPlayerLoader_BitmapImage2_i(), this._VPlayerLoader_BitmapImage3_i(), this._VPlayerLoader_BitmapImage4_i(), this._VPlayerLoader_VSlider1_i(), this._VPlayerLoader_Button1_i(), this._VPlayerLoader_Button2_i(), this._VPlayerLoader_Button3_i(), this._VPlayerLoader_SkinnableContainer4_i(), this._VPlayerLoader_ToggleButton5_i(), this._VPlayerLoader_HSlider1_i(), this._VPlayerLoader_HSlider2_i(), this._VPlayerLoader_Button4_i(), this._VPlayerLoader_Button5_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_BitmapImage1_i() : BitmapImage
        {
            var _loc_1:BitmapImage = null;
            _loc_1 = new BitmapImage();
            _loc_1.alpha = 0.7;
            _loc_1.smooth = true;
            _loc_1.source = this._embed_mxml__assets_images_bar_png_1785051370;
            _loc_1.left = 0;
            _loc_1.right = 0;
            _loc_1.y = 0;
            _loc_1.designLayer = this.designlayer4;
            _loc_1.initialized(this, "controlBarBgImage");
            this.controlBarBgImage = _loc_1;
            BindingManager.executeBindings(this, "controlBarBgImage", this.controlBarBgImage);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_BitmapImage2_i() : BitmapImage
        {
            var _loc_1:BitmapImage = null;
            _loc_1 = new BitmapImage();
            _loc_1.smooth = true;
            _loc_1.source = this._embed_mxml__assets_images_rightside_png_646811178;
            _loc_1.right = 0;
            _loc_1.y = 0;
            _loc_1.designLayer = this.designlayer4;
            _loc_1.initialized(this, "rightSideImage");
            this.rightSideImage = _loc_1;
            BindingManager.executeBindings(this, "rightSideImage", this.rightSideImage);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_BitmapImage3_i() : BitmapImage
        {
            var _loc_1:BitmapImage = null;
            _loc_1 = new BitmapImage();
            _loc_1.alpha = 1;
            _loc_1.smooth = true;
            _loc_1.source = this._embed_mxml__assets_images_leftSideBg_png_1366390704;
            _loc_1.x = 0;
            _loc_1.y = 0;
            _loc_1.designLayer = this.designlayer4;
            _loc_1.initialized(this, "leftSideImage");
            this.leftSideImage = _loc_1;
            BindingManager.executeBindings(this, "leftSideImage", this.leftSideImage);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_BitmapImage4_i() : BitmapImage
        {
            var _loc_1:BitmapImage = null;
            _loc_1 = new BitmapImage();
            _loc_1.alpha = 0.7;
            _loc_1.height = 37;
            _loc_1.smooth = true;
            _loc_1.source = this._embed_mxml__assets_images_gradient_png_1409094594;
            _loc_1.left = 365;
            _loc_1.right = 363;
            _loc_1.top = 0;
            _loc_1.designLayer = this.designlayer4;
            _loc_1.initialized(this, "gradientImage");
            this.gradientImage = _loc_1;
            BindingManager.executeBindings(this, "gradientImage", this.gradientImage);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_VSlider1_i() : VSlider
        {
            var _loc_1:VSlider = null;
            _loc_1 = new VSlider();
            _loc_1.minimum = 0;
            _loc_1.maximum = 1;
            _loc_1.stepSize = 0.1;
            _loc_1.x = 334;
            _loc_1.y = -71;
            _loc_1.setStyle("skinClass", VolumeSlider);
            _loc_1.addEventListener("rollOut", this.__volumeSlider_rollOut);
            _loc_1.addEventListener("change", this.__volumeSlider_change);
            _loc_1.id = "volumeSlider";
            _loc_1.designLayer = this.designlayer4;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.volumeSlider = _loc_1;
            BindingManager.executeBindings(this, "volumeSlider", this.volumeSlider);
            return _loc_1;
        }// end function

        public function __volumeSlider_rollOut(event:MouseEvent) : void
        {
            this.volumeSlider_rollOutHandler();
            return;
        }// end function

        public function __volumeSlider_change(event:Event) : void
        {
            this.volumeSlider_changeHandler(event);
            return;
        }// end function

        private function _VPlayerLoader_Button1_i() : Button
        {
            var _loc_1:Button = null;
            _loc_1 = new Button();
            _loc_1.horizontalCenter = 0;
            _loc_1.focusEnabled = false;
            _loc_1.tabEnabled = false;
            _loc_1.y = 25;
            _loc_1.setStyle("skinClass", MinimizeButton);
            _loc_1.addEventListener("click", this.__minimizeBtn_click);
            _loc_1.id = "minimizeBtn";
            _loc_1.designLayer = this.designlayer4;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.minimizeBtn = _loc_1;
            BindingManager.executeBindings(this, "minimizeBtn", this.minimizeBtn);
            return _loc_1;
        }// end function

        public function __minimizeBtn_click(event:MouseEvent) : void
        {
            this.toggleControlPanel(event);
            return;
        }// end function

        private function _VPlayerLoader_Button2_i() : Button
        {
            var _loc_1:Button = null;
            _loc_1 = new Button();
            _loc_1.x = 326;
            _loc_1.y = 2;
            _loc_1.setStyle("skinClass", AudioButton);
            _loc_1.addEventListener("click", this.__volumeBtn_click);
            _loc_1.id = "volumeBtn";
            _loc_1.designLayer = this.designlayer4;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.volumeBtn = _loc_1;
            BindingManager.executeBindings(this, "volumeBtn", this.volumeBtn);
            return _loc_1;
        }// end function

        public function __volumeBtn_click(event:MouseEvent) : void
        {
            this.volumeButton_clickHandler();
            return;
        }// end function

        private function _VPlayerLoader_Button3_i() : Button
        {
            var _loc_1:Button = null;
            _loc_1 = new Button();
            _loc_1.x = 288;
            _loc_1.y = 2;
            _loc_1.setStyle("skinClass", GearButton);
            _loc_1.addEventListener("click", this.__gearBtn_click);
            _loc_1.id = "gearBtn";
            _loc_1.designLayer = this.designlayer4;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.gearBtn = _loc_1;
            BindingManager.executeBindings(this, "gearBtn", this.gearBtn);
            return _loc_1;
        }// end function

        public function __gearBtn_click(event:MouseEvent) : void
        {
            this.gearButton_clickHandler();
            return;
        }// end function

        private function _VPlayerLoader_ToggleButton4_i() : ToggleButton
        {
            var _loc_1:ToggleButton = null;
            _loc_1 = new ToggleButton();
            _loc_1.x = 169;
            _loc_1.y = 10;
            _loc_1.focusEnabled = false;
            _loc_1.visible = true;
            _loc_1.setStyle("skinClass", MaxSpeedToggleButton);
            _loc_1.addEventListener("click", this.__maxSpeedBtn_click);
            _loc_1.id = "maxSpeedBtn";
            _loc_1.designLayer = this.designlayer4;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.maxSpeedBtn = _loc_1;
            BindingManager.executeBindings(this, "maxSpeedBtn", this.maxSpeedBtn);
            return _loc_1;
        }// end function

        public function __maxSpeedBtn_click(event:MouseEvent) : void
        {
            this.maxSpeedBtn_clickHandler(event);
            return;
        }// end function

        private function _VPlayerLoader_ToyActiveIndicator1_i() : ToyActiveIndicator
        {
            var _loc_1:ToyActiveIndicator = null;
            _loc_1 = new ToyActiveIndicator();
            _loc_1.x = 1;
            _loc_1.y = 1;
            _loc_1.id = "activeIndicator";
            _loc_1.designLayer = this.designlayer4;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.activeIndicator = _loc_1;
            BindingManager.executeBindings(this, "activeIndicator", this.activeIndicator);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_SkinnableContainer4_i() : SkinnableContainer
        {
            var _loc_1:SkinnableContainer = null;
            _loc_1 = new SkinnableContainer();
            _loc_1.right = 0;
            _loc_1.mxmlContentFactory = new DeferredInstanceFromFunction(this._VPlayerLoader_Array86_c);
            _loc_1.id = "sceneGroup";
            _loc_1.designLayer = this.designlayer4;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneGroup = _loc_1;
            BindingManager.executeBindings(this, "sceneGroup", this.sceneGroup);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Array86_c() : Array
        {
            var _loc_1:Array = null;
            _loc_1 = [this._VPlayerLoader_InteractiveTxt1_i(), this._VPlayerLoader_PreviewPane1_i()];
            return _loc_1;
        }// end function

        private function _VPlayerLoader_RadioButton1_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "1";
            _loc_1.x = 0;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", IntroSceneRadioButton);
            _loc_1.addEventListener("rollOut", this.__introBtn_rollOut);
            _loc_1.addEventListener("rollOver", this.__introBtn_rollOver);
            _loc_1.addEventListener("click", this.__introBtn_click);
            _loc_1.id = "introBtn";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.introBtn = _loc_1;
            BindingManager.executeBindings(this, "introBtn", this.introBtn);
            return _loc_1;
        }// end function

        public function __introBtn_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __introBtn_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __introBtn_click(event:MouseEvent) : void
        {
            this.introBtn_clickHandler();
            return;
        }// end function

        private function _VPlayerLoader_RadioButton2_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "2";
            _loc_1.x = 44;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", SceneNumRadioButton);
            _loc_1.addEventListener("rollOut", this.__sceneBtn2_rollOut);
            _loc_1.addEventListener("rollOver", this.__sceneBtn2_rollOver);
            _loc_1.addEventListener("click", this.__sceneBtn2_click);
            _loc_1.id = "sceneBtn2";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneBtn2 = _loc_1;
            BindingManager.executeBindings(this, "sceneBtn2", this.sceneBtn2);
            return _loc_1;
        }// end function

        public function __sceneBtn2_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __sceneBtn2_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __sceneBtn2_click(event:MouseEvent) : void
        {
            this.onSceneBtnClick(event);
            return;
        }// end function

        private function _VPlayerLoader_RadioButton3_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "3";
            _loc_1.x = 78;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", SceneNumRadioButton);
            _loc_1.addEventListener("rollOut", this.__sceneBtn3_rollOut);
            _loc_1.addEventListener("rollOver", this.__sceneBtn3_rollOver);
            _loc_1.addEventListener("click", this.__sceneBtn3_click);
            _loc_1.id = "sceneBtn3";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneBtn3 = _loc_1;
            BindingManager.executeBindings(this, "sceneBtn3", this.sceneBtn3);
            return _loc_1;
        }// end function

        public function __sceneBtn3_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __sceneBtn3_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __sceneBtn3_click(event:MouseEvent) : void
        {
            this.onSceneBtnClick(event);
            return;
        }// end function

        private function _VPlayerLoader_RadioButton4_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "4";
            _loc_1.x = 112;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", SceneNumRadioButton);
            _loc_1.addEventListener("rollOut", this.__sceneBtn4_rollOut);
            _loc_1.addEventListener("rollOver", this.__sceneBtn4_rollOver);
            _loc_1.addEventListener("click", this.__sceneBtn4_click);
            _loc_1.id = "sceneBtn4";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneBtn4 = _loc_1;
            BindingManager.executeBindings(this, "sceneBtn4", this.sceneBtn4);
            return _loc_1;
        }// end function

        public function __sceneBtn4_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __sceneBtn4_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __sceneBtn4_click(event:MouseEvent) : void
        {
            this.onSceneBtnClick(event);
            return;
        }// end function

        private function _VPlayerLoader_RadioButton5_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "5";
            _loc_1.x = 146;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", SceneNumRadioButton);
            _loc_1.addEventListener("rollOut", this.__sceneBtn5_rollOut);
            _loc_1.addEventListener("rollOver", this.__sceneBtn5_rollOver);
            _loc_1.addEventListener("click", this.__sceneBtn5_click);
            _loc_1.id = "sceneBtn5";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneBtn5 = _loc_1;
            BindingManager.executeBindings(this, "sceneBtn5", this.sceneBtn5);
            return _loc_1;
        }// end function

        public function __sceneBtn5_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __sceneBtn5_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __sceneBtn5_click(event:MouseEvent) : void
        {
            this.onSceneBtnClick(event);
            return;
        }// end function

        private function _VPlayerLoader_RadioButton6_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "6";
            _loc_1.x = 180;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", SceneNumRadioButton);
            _loc_1.addEventListener("rollOut", this.__sceneBtn6_rollOut);
            _loc_1.addEventListener("rollOver", this.__sceneBtn6_rollOver);
            _loc_1.addEventListener("click", this.__sceneBtn6_click);
            _loc_1.id = "sceneBtn6";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneBtn6 = _loc_1;
            BindingManager.executeBindings(this, "sceneBtn6", this.sceneBtn6);
            return _loc_1;
        }// end function

        public function __sceneBtn6_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __sceneBtn6_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __sceneBtn6_click(event:MouseEvent) : void
        {
            this.onSceneBtnClick(event);
            return;
        }// end function

        private function _VPlayerLoader_RadioButton7_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "7";
            _loc_1.x = 214;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", SceneNumRadioButton);
            _loc_1.addEventListener("rollOut", this.__sceneBtn7_rollOut);
            _loc_1.addEventListener("rollOver", this.__sceneBtn7_rollOver);
            _loc_1.addEventListener("click", this.__sceneBtn7_click);
            _loc_1.id = "sceneBtn7";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneBtn7 = _loc_1;
            BindingManager.executeBindings(this, "sceneBtn7", this.sceneBtn7);
            return _loc_1;
        }// end function

        public function __sceneBtn7_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __sceneBtn7_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __sceneBtn7_click(event:MouseEvent) : void
        {
            this.onSceneBtnClick(event);
            return;
        }// end function

        private function _VPlayerLoader_RadioButton8_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "8";
            _loc_1.x = 248;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", SceneNumRadioButton);
            _loc_1.addEventListener("rollOut", this.__sceneBtn8_rollOut);
            _loc_1.addEventListener("rollOver", this.__sceneBtn8_rollOver);
            _loc_1.addEventListener("click", this.__sceneBtn8_click);
            _loc_1.id = "sceneBtn8";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneBtn8 = _loc_1;
            BindingManager.executeBindings(this, "sceneBtn8", this.sceneBtn8);
            return _loc_1;
        }// end function

        public function __sceneBtn8_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __sceneBtn8_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __sceneBtn8_click(event:MouseEvent) : void
        {
            this.onSceneBtnClick(event);
            return;
        }// end function

        private function _VPlayerLoader_RadioButton9_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "9";
            _loc_1.x = 282;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", SceneNumRadioButton);
            _loc_1.addEventListener("rollOut", this.__sceneBtn9_rollOut);
            _loc_1.addEventListener("rollOver", this.__sceneBtn9_rollOver);
            _loc_1.addEventListener("click", this.__sceneBtn9_click);
            _loc_1.id = "sceneBtn9";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sceneBtn9 = _loc_1;
            BindingManager.executeBindings(this, "sceneBtn9", this.sceneBtn9);
            return _loc_1;
        }// end function

        public function __sceneBtn9_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __sceneBtn9_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __sceneBtn9_click(event:MouseEvent) : void
        {
            this.onSceneBtnClick(event);
            return;
        }// end function

        private function _VPlayerLoader_RadioButton10_i() : RadioButton
        {
            var _loc_1:RadioButton = null;
            _loc_1 = new RadioButton();
            _loc_1.enabled = true;
            _loc_1.groupName = "SceneBtnGroup";
            _loc_1.label = "0";
            _loc_1.x = 319;
            _loc_1.y = 1;
            _loc_1.focusEnabled = false;
            _loc_1.setStyle("skinClass", ClimaxSceneRadioButton);
            _loc_1.addEventListener("rollOut", this.__climaxBtn_rollOut);
            _loc_1.addEventListener("rollOver", this.__climaxBtn_rollOver);
            _loc_1.addEventListener("click", this.__climaxBtn_click);
            _loc_1.id = "climaxBtn";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.climaxBtn = _loc_1;
            BindingManager.executeBindings(this, "climaxBtn", this.climaxBtn);
            return _loc_1;
        }// end function

        public function __climaxBtn_rollOut(event:MouseEvent) : void
        {
            this.onSceneBtnRollOut(event);
            return;
        }// end function

        public function __climaxBtn_rollOver(event:MouseEvent) : void
        {
            this.onSceneBtnRollOver(event);
            return;
        }// end function

        public function __climaxBtn_click(event:MouseEvent) : void
        {
            this.climaxBtn_clickHandler();
            return;
        }// end function

        private function _VPlayerLoader_InteractiveTxt1_i() : InteractiveTxt
        {
            var _loc_1:InteractiveTxt = null;
            _loc_1 = new InteractiveTxt();
            _loc_1.x = 125;
            _loc_1.y = 25;
            _loc_1.id = "interactiveTxt";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.interactiveTxt = _loc_1;
            BindingManager.executeBindings(this, "interactiveTxt", this.interactiveTxt);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_PreviewPane1_i() : PreviewPane
        {
            var _loc_1:PreviewPane = null;
            _loc_1 = new PreviewPane();
            _loc_1.x = 48;
            _loc_1.y = -157;
            _loc_1.id = "previewPane";
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.previewPane = _loc_1;
            BindingManager.executeBindings(this, "previewPane", this.previewPane);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_ToggleButton5_i() : ToggleButton
        {
            var _loc_1:ToggleButton = null;
            _loc_1 = new ToggleButton();
            _loc_1.x = 250;
            _loc_1.y = 2;
            _loc_1.setStyle("skinClass", PauseButton);
            _loc_1.addEventListener("click", this.__pauseBtn_click);
            _loc_1.id = "pauseBtn";
            _loc_1.designLayer = this.designlayer5;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.pauseBtn = _loc_1;
            BindingManager.executeBindings(this, "pauseBtn", this.pauseBtn);
            return _loc_1;
        }// end function

        public function __pauseBtn_click(event:MouseEvent) : void
        {
            this.pauseButton_clickHandler();
            return;
        }// end function

        private function _VPlayerLoader_HSlider1_i() : HSlider
        {
            var _loc_1:HSlider = null;
            _loc_1 = new HSlider();
            _loc_1.height = 11;
            _loc_1.minimum = 0;
            _loc_1.maximum = 100;
            _loc_1.snapInterval = 1;
            _loc_1.value = 1;
            _loc_1.width = 278;
            _loc_1.horizontalCenter = 0;
            _loc_1.y = 12;
            _loc_1.setStyle("skinClass", TimelineSlider);
            _loc_1.id = "scrubber";
            _loc_1.designLayer = this.designlayer5;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.scrubber = _loc_1;
            BindingManager.executeBindings(this, "scrubber", this.scrubber);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_HSlider2_i() : HSlider
        {
            var _loc_1:HSlider = null;
            _loc_1 = new HSlider();
            _loc_1.minimum = 1;
            _loc_1.maximum = 10;
            _loc_1.snapInterval = 0.5;
            _loc_1.value = 5.5;
            _loc_1.showDataTip = true;
            _loc_1.dataTipPrecision = 1;
            _loc_1.x = 66;
            _loc_1.y = 13;
            _loc_1.setStyle("skinClass", SensitivitySlider);
            _loc_1.addEventListener("change", this.__sensitivitySlider_change);
            _loc_1.id = "sensitivitySlider";
            _loc_1.designLayer = this.designlayer8;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.sensitivitySlider = _loc_1;
            BindingManager.executeBindings(this, "sensitivitySlider", this.sensitivitySlider);
            return _loc_1;
        }// end function

        public function __sensitivitySlider_change(event:Event) : void
        {
            this.changeSensitivity();
            return;
        }// end function

        private function _VPlayerLoader_Button4_i() : Button
        {
            var _loc_1:Button = null;
            _loc_1 = new Button();
            _loc_1.label = "+";
            _loc_1.x = 145;
            _loc_1.y = 11;
            _loc_1.setStyle("skinClass", PlusMinusButton);
            _loc_1.id = "plusBtn";
            _loc_1.designLayer = this.designlayer8;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.plusBtn = _loc_1;
            BindingManager.executeBindings(this, "plusBtn", this.plusBtn);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_Button5_i() : Button
        {
            var _loc_1:Button = null;
            _loc_1 = new Button();
            _loc_1.label = "-";
            _loc_1.x = 51;
            _loc_1.y = 11;
            _loc_1.setStyle("skinClass", PlusMinusButton);
            _loc_1.id = "minusBtn";
            _loc_1.designLayer = this.designlayer8;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.minusBtn = _loc_1;
            BindingManager.executeBindings(this, "minusBtn", this.minusBtn);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_BitmapImage5_i() : BitmapImage
        {
            var _loc_1:BitmapImage = null;
            _loc_1 = new BitmapImage();
            _loc_1.smooth = true;
            _loc_1.source = this._embed_mxml__assets_images_movementMeterBg_png_1109567902;
            _loc_1.horizontalCenter = 0;
            _loc_1.y = 14;
            _loc_1.designLayer = this.designlayer8;
            _loc_1.initialized(this, "trackBg");
            this.trackBg = _loc_1;
            BindingManager.executeBindings(this, "trackBg", this.trackBg);
            return _loc_1;
        }// end function

        private function _VPlayerLoader_MovementBar1_i() : MovementBar
        {
            var _loc_1:MovementBar = null;
            _loc_1 = new MovementBar();
            _loc_1.horizontalCenter = 0;
            _loc_1.y = 14;
            _loc_1.id = "movementMeter";
            _loc_1.designLayer = this.designlayer8;
            if (!_loc_1.document)
            {
                _loc_1.document = this;
            }
            this.movementMeter = _loc_1;
            BindingManager.executeBindings(this, "movementMeter", this.movementMeter);
            return _loc_1;
        }// end function

        public function ___VPlayerLoader_WindowedApplication1_applicationComplete(event:FlexEvent) : void
        {
            this.initApp();
            return;
        }// end function

        public function ___VPlayerLoader_WindowedApplication1_closing(event:Event) : void
        {
            this.onWindowClosing(event);
            return;
        }// end function

        public function ___VPlayerLoader_WindowedApplication1_invoke(event:InvokeEvent) : void
        {
            this.onAppInvoked(event);
            return;
        }// end function

        private function _VPlayerLoader_bindingsSetup() : Array
        {
            var result:Array;
            result;
            result[0] = new Binding(this, null, null, "_VPlayerLoader_Parallel2.target", "volumeSlider");
            result[1] = new Binding(this, null, null, "_VPlayerLoader_Parallel4.target", "volumeSlider");
            result[2] = new Binding(this, null, null, "_VPlayerLoader_Parallel6.target", "videoPlayer");
            result[3] = new Binding(this, null, null, "_VPlayerLoader_Parallel7.target", "minimizeBtn");
            result[4] = new Binding(this, null, null, "_VPlayerLoader_Parallel8.target", "volumeBtn");
            result[5] = new Binding(this, null, null, "_VPlayerLoader_Parallel9.target", "introBtn");
            result[6] = new Binding(this, null, null, "_VPlayerLoader_Parallel10.target", "sceneBtn2");
            result[7] = new Binding(this, null, null, "_VPlayerLoader_Parallel11.target", "sceneBtn3");
            result[8] = new Binding(this, null, null, "_VPlayerLoader_Parallel12.target", "sceneBtn4");
            result[9] = new Binding(this, null, null, "_VPlayerLoader_Parallel13.target", "designlayer5");
            result[10] = new Binding(this, null, null, "_VPlayerLoader_Parallel14.target", "volumeSlider");
            result[11] = new Binding(this, null, null, "_VPlayerLoader_Parallel15.target", "gearBtn");
            result[12] = new Binding(this, null, null, "_VPlayerLoader_Parallel16.target", "interactiveTxt");
            result[13] = new Binding(this, null, null, "_VPlayerLoader_Parallel17.target", "climaxBtn");
            result[14] = new Binding(this, null, null, "_VPlayerLoader_Parallel18.target", "sceneBtn5");
            result[15] = new Binding(this, null, null, "_VPlayerLoader_Parallel19.target", "sceneBtn6");
            result[16] = new Binding(this, null, null, "_VPlayerLoader_Parallel20.target", "sceneBtn7");
            result[17] = new Binding(this, null, null, "_VPlayerLoader_Parallel21.target", "sceneBtn8");
            result[18] = new Binding(this, null, null, "_VPlayerLoader_Parallel22.target", "sceneBtn9");
            result[19] = new Binding(this, null, null, "_VPlayerLoader_Parallel24.target", "minimizeBtn");
            result[20] = new Binding(this, null, null, "_VPlayerLoader_Parallel25.target", "volumeBtn");
            result[21] = new Binding(this, null, null, "_VPlayerLoader_Parallel26.target", "gearBtn");
            result[22] = new Binding(this, null, null, "_VPlayerLoader_Parallel27.target", "interactiveTxt");
            result[23] = new Binding(this, null, null, "_VPlayerLoader_Parallel28.target", "climaxBtn");
            result[24] = new Binding(this, null, null, "_VPlayerLoader_Parallel29.target", "designlayer8");
            result[25] = new Binding(this, null, null, "_VPlayerLoader_Parallel30.target", "volumeSlider");
            result[26] = new Binding(this, null, null, "_VPlayerLoader_Parallel31.target", "introBtn");
            result[27] = new Binding(this, null, null, "_VPlayerLoader_Parallel32.target", "plusBtn");
            result[28] = new Binding(this, null, null, "_VPlayerLoader_Parallel33.target", "minusBtn");
            result[29] = new Binding(this, null, null, "_VPlayerLoader_Parallel34.target", "sceneBtn2");
            result[30] = new Binding(this, null, null, "_VPlayerLoader_Parallel35.target", "sceneBtn5");
            result[31] = new Binding(this, null, null, "_VPlayerLoader_Parallel36.target", "sceneBtn4");
            result[32] = new Binding(this, null, null, "_VPlayerLoader_Parallel37.target", "sceneBtn3");
            result[33] = new Binding(this, null, null, "_VPlayerLoader_Parallel38.target", "sceneBtn6");
            result[34] = new Binding(this, null, null, "_VPlayerLoader_Parallel39.target", "sceneBtn7");
            result[35] = new Binding(this, null, null, "_VPlayerLoader_Parallel40.target", "sceneBtn8");
            result[36] = new Binding(this, null, null, "_VPlayerLoader_Parallel41.target", "sceneBtn9");
            result[37] = new Binding(this, null, null, "_VPlayerLoader_Parallel43.target", "minimizeBtn");
            result[38] = new Binding(this, null, null, "_VPlayerLoader_Parallel44.target", "volumeBtn");
            result[39] = new Binding(this, null, null, "_VPlayerLoader_Parallel45.target", "interactiveTxt");
            result[40] = new Binding(this, null, null, "_VPlayerLoader_Parallel46.target", "gearBtn");
            result[41] = new Binding(this, null, null, "_VPlayerLoader_Parallel47.target", "volumeSlider");
            result[42] = new Binding(this, null, null, "_VPlayerLoader_Parallel48.target", "introBtn");
            result[43] = new Binding(this, null, null, "_VPlayerLoader_Parallel49.target", "sceneBtn2");
            result[44] = new Binding(this, null, null, "_VPlayerLoader_Parallel50.target", "climaxBtn");
            result[45] = new Binding(this, null, null, "_VPlayerLoader_Parallel51.target", "sceneBtn3");
            result[46] = new Binding(this, null, null, "_VPlayerLoader_Parallel52.target", "sceneBtn5");
            result[47] = new Binding(this, null, null, "_VPlayerLoader_Parallel53.target", "sceneBtn4");
            result[48] = new Binding(this, null, null, "_VPlayerLoader_Parallel54.target", "sceneBtn6");
            result[49] = new Binding(this, null, null, "_VPlayerLoader_Parallel55.target", "sceneBtn7");
            result[50] = new Binding(this, null, null, "_VPlayerLoader_Parallel56.target", "sceneBtn8");
            result[51] = new Binding(this, null, null, "_VPlayerLoader_Parallel57.target", "sceneBtn9");
            result[52] = new Binding(this, null, null, "_VPlayerLoader_Parallel58.target", "disclaimerPanel");
            result[53] = new Binding(this, null, null, "_VPlayerLoader_Parallel60.target", "minimizeBtn");
            result[54] = new Binding(this, null, null, "_VPlayerLoader_Parallel61.target", "gearBtn");
            result[55] = new Binding(this, null, null, "_VPlayerLoader_Parallel62.target", "volumeBtn");
            result[56] = new Binding(this, null, null, "_VPlayerLoader_Parallel63.target", "volumeSlider");
            result[57] = new Binding(this, null, null, "_VPlayerLoader_Parallel64.target", "interactiveTxt");
            result[58] = new Binding(this, null, null, "_VPlayerLoader_Parallel65.target", "introBtn");
            result[59] = new Binding(this, null, null, "_VPlayerLoader_Parallel66.target", "climaxBtn");
            result[60] = new Binding(this, null, null, "_VPlayerLoader_Parallel67.target", "disclaimerPanel");
            result[61] = new Binding(this, null, null, "_VPlayerLoader_Parallel68.target", "sceneBtn2");
            result[62] = new Binding(this, null, null, "_VPlayerLoader_Parallel70.target", "designlayer4");
            result[63] = new Binding(this, null, null, "_VPlayerLoader_Parallel71.target", "volumeSlider");
            result[64] = new Binding(this, null, null, "_VPlayerLoader_Parallel72.target", "minimizeBtn");
            result[65] = new Binding(this, null, null, "_VPlayerLoader_Parallel73.target", "designlayer5");
            result[66] = new Binding(this, null, null, "_VPlayerLoader_Parallel75.target", "volumeSlider");
            result[67] = new Binding(this, null, null, "_VPlayerLoader_Parallel76.target", "interactiveTxt");
            result[68] = new Binding(this, null, null, "_VPlayerLoader_Parallel77.target", "designlayer5");
            result[69] = new Binding(this, null, null, "_VPlayerLoader_Parallel78.target", "pauseBtn");
            result[70] = new Binding(this, function () : Number
            {
                return this.height - 36;
            }// end function
            , null, "controlPanelHolder.y");
            result[71] = new Binding(this, function ()
            {
                return isMeterVisible;
            }// end function
            , null, "_VPlayerLoader_SetProperty1.value");
            result[72] = new Binding(this, function () : Boolean
            {
                return isMeterVisible;
            }// end function
            , null, "movementMeter.visible");
            result[73] = new Binding(this, function ()
            {
                return isMeterVisible;
            }// end function
            , null, "_VPlayerLoader_SetProperty2.value");
            return result;
        }// end function

        function _VPlayerLoader_StylesInit() : void
        {
            var style:CSSStyleDeclaration;
            var effects:Array;
            var conditions:Array;
            var condition:CSSCondition;
            var selector:CSSSelector;
            if (mx_internal::_VPlayerLoader_StylesInit_done)
            {
                return;
            }
            mx_internal::_VPlayerLoader_StylesInit_done = true;
            selector;
            conditions;
            conditions;
            selector = new CSSSelector("mx.controls.Alert", conditions, selector);
            style = styleManager.getStyleDeclaration("mx.controls.Alert");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.backgroundSize = "100%";
                this.embedFonts = true;
                this.borderColor = 2236962;
                this.shadowDistance = 5;
                this.cornerRadius = 2;
                this.backgroundImage = BackgroundGradient;
                this.fillAlphas = [1, 1];
                this.borderThicknessTop = 1;
                this.titleStyleName = "alertTitle";
                this.shadowDirection = "right";
                this.borderThicknessRight = 1;
                this.borderThicknessBottom = 1;
                this.messageStyleName = "alertMessage";
                this.dropShadowEnabled = true;
                this.buttonStyleName = "alertButton";
                this.headerColors = [3355443, 2236962];
                this.borderThicknessLeft = 1;
                this.fontFamily = "Bank Gothic";
                this.footerColors = [0, 0];
                this.fillColors = [3355443, 0];
                this.paddingBottom = 10;
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            condition = new CSSCondition("class", "alertTitle");
            conditions.push(condition);
            selector = new CSSSelector("", conditions, selector);
            style = styleManager.getStyleDeclaration(".alertTitle");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.color = 16777215;
                this.letterSpacing = 1;
                this.textAlign = "center";
                this.fontSize = 18;
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            condition = new CSSCondition("class", "alertMessage");
            conditions.push(condition);
            selector = new CSSSelector("", conditions, selector);
            style = styleManager.getStyleDeclaration(".alertMessage");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.fontWeight = "normal";
                this.paddingTop = 4;
                this.color = 13421772;
                this.letterSpacing = 0;
                this.fontSize = 14;
                this.paddingBottom = 4;
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            condition = new CSSCondition("class", "alertButton");
            conditions.push(condition);
            selector = new CSSSelector("", conditions, selector);
            style = styleManager.getStyleDeclaration(".alertButton");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.paddingTop = 6;
                this.borderColor = 3355443;
                this.cornerRadius = 0;
                this.textRollOverColor = 2276328;
                this.fontSize = 15;
                this.fillAlphas = [1, 1, 1, 1];
                this.paddingLeft = 10;
                this.themeColor = 39372;
                this.paddingRight = 10;
                this.fontWeight = "normal";
                this.color = 39372;
                this.fontFamily = "Bank Gothic";
                this.fillColors = [139810, 0, 0, 3355443];
                this.paddingBottom = 4;
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            condition = new CSSCondition("class", "bgGradient");
            conditions.push(condition);
            selector = new CSSSelector("", conditions, selector);
            style = styleManager.getStyleDeclaration(".bgGradient");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.backgroundSize = "100%";
                this.backgroundImage = BackgroundGradient;
                this.fillColors = [3355443, 0];
                this.fillAlphas = [1, 1];
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            selector = new CSSSelector("global", conditions, selector);
            style = styleManager.getStyleDeclaration("global");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.layoutDirection = "ltr";
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            condition = new CSSCondition("class", "myDataTip");
            conditions.push(condition);
            selector = new CSSSelector("", conditions, selector);
            style = styleManager.getStyleDeclaration(".myDataTip");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.fontWeight = "bold";
                this.color = 16777215;
                this.backgroundColor = 0;
                this.fontFamily = "Bank Gothic";
                this.fontSize = 16;
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            condition = new CSSCondition("class", "loginPrompt");
            conditions.push(condition);
            selector = new CSSSelector("", conditions, selector);
            style = styleManager.getStyleDeclaration(".loginPrompt");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.color = 7829367;
                this.fontFamily = "Helvetica Thin";
                this.trackingRight = 1;
                this.fontSize = 16;
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            condition = new CSSCondition("class", "loginField");
            conditions.push(condition);
            selector = new CSSSelector("", conditions, selector);
            style = styleManager.getStyleDeclaration(".loginField");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.color = 3355494;
                this.fontFamily = "Helvetica Neue";
                this.trackingRight = 1;
                this.fontSize = 20;
                return;
            }// end function
            ;
            }
            selector;
            conditions;
            conditions;
            selector = new CSSSelector("spark.components.HSlider", conditions, selector);
            style = styleManager.getStyleDeclaration("spark.components.HSlider");
            if (!style)
            {
                style = new CSSStyleDeclaration(selector, styleManager);
            }
            if (style.factory == null)
            {
                style.factory = function () : void
            {
                this.dataTipOffset = -22;
                this.dataTipStyleName = "myDataTip";
                return;
            }// end function
            ;
            }
            styleManager.initProtoChainRoots();
            return;
        }// end function

        override protected function get skinParts() : Object
        {
            return _skinParts;
        }// end function

        public function get Sequence2() : Parallel
        {
            return this._890282097Sequence2;
        }// end function

        public function set Sequence2(param1:Parallel) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._890282097Sequence2;
            if (_loc_2 !== param1)
            {
                this._890282097Sequence2 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Sequence2", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get Sequence3() : Parallel
        {
            return this._890282098Sequence3;
        }// end function

        public function set Sequence3(param1:Parallel) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._890282098Sequence3;
            if (_loc_2 !== param1)
            {
                this._890282098Sequence3 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "Sequence3", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get _VPlayerLoader_SetProperty1() : SetProperty
        {
            return this._283012814_VPlayerLoader_SetProperty1;
        }// end function

        public function set _VPlayerLoader_SetProperty1(param1:SetProperty) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._283012814_VPlayerLoader_SetProperty1;
            if (_loc_2 !== param1)
            {
                this._283012814_VPlayerLoader_SetProperty1 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "_VPlayerLoader_SetProperty1", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get _VPlayerLoader_SetProperty2() : SetProperty
        {
            return this._283012815_VPlayerLoader_SetProperty2;
        }// end function

        public function set _VPlayerLoader_SetProperty2(param1:SetProperty) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._283012815_VPlayerLoader_SetProperty2;
            if (_loc_2 !== param1)
            {
                this._283012815_VPlayerLoader_SetProperty2 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "_VPlayerLoader_SetProperty2", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get activeIndicator() : ToyActiveIndicator
        {
            return this._276175447activeIndicator;
        }// end function

        public function set activeIndicator(param1:ToyActiveIndicator) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._276175447activeIndicator;
            if (_loc_2 !== param1)
            {
                this._276175447activeIndicator = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "activeIndicator", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get climaxBtn() : RadioButton
        {
            return this._1686970504climaxBtn;
        }// end function

        public function set climaxBtn(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1686970504climaxBtn;
            if (_loc_2 !== param1)
            {
                this._1686970504climaxBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "climaxBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get clipContainer() : UIComponent
        {
            return this._864058607clipContainer;
        }// end function

        public function set clipContainer(param1:UIComponent) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._864058607clipContainer;
            if (_loc_2 !== param1)
            {
                this._864058607clipContainer = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "clipContainer", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get closeAppBtn() : ToggleButton
        {
            return this._346112877closeAppBtn;
        }// end function

        public function set closeAppBtn(param1:ToggleButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._346112877closeAppBtn;
            if (_loc_2 !== param1)
            {
                this._346112877closeAppBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "closeAppBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get controlBarBgImage() : BitmapImage
        {
            return this._336294336controlBarBgImage;
        }// end function

        public function set controlBarBgImage(param1:BitmapImage) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._336294336controlBarBgImage;
            if (_loc_2 !== param1)
            {
                this._336294336controlBarBgImage = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "controlBarBgImage", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get controlPanel() : SkinnableContainer
        {
            return this._1637382489controlPanel;
        }// end function

        public function set controlPanel(param1:SkinnableContainer) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1637382489controlPanel;
            if (_loc_2 !== param1)
            {
                this._1637382489controlPanel = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "controlPanel", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get controlPanelHolder() : SkinnableContainer
        {
            return this._2072471347controlPanelHolder;
        }// end function

        public function set controlPanelHolder(param1:SkinnableContainer) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._2072471347controlPanelHolder;
            if (_loc_2 !== param1)
            {
                this._2072471347controlPanelHolder = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "controlPanelHolder", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get designlayer4() : DesignLayer
        {
            return this._1861234623designlayer4;
        }// end function

        public function set designlayer4(param1:DesignLayer) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1861234623designlayer4;
            if (_loc_2 !== param1)
            {
                this._1861234623designlayer4 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "designlayer4", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get designlayer5() : DesignLayer
        {
            return this._1861234622designlayer5;
        }// end function

        public function set designlayer5(param1:DesignLayer) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1861234622designlayer5;
            if (_loc_2 !== param1)
            {
                this._1861234622designlayer5 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "designlayer5", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get designlayer8() : DesignLayer
        {
            return this._1861234619designlayer8;
        }// end function

        public function set designlayer8(param1:DesignLayer) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1861234619designlayer8;
            if (_loc_2 !== param1)
            {
                this._1861234619designlayer8 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "designlayer8", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get disclaimerPanel() : DisclaimerPanel
        {
            return this._311431895disclaimerPanel;
        }// end function

        public function set disclaimerPanel(param1:DisclaimerPanel) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._311431895disclaimerPanel;
            if (_loc_2 !== param1)
            {
                this._311431895disclaimerPanel = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "disclaimerPanel", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get fullScreenBtn() : ToggleButton
        {
            return this._356332415fullScreenBtn;
        }// end function

        public function set fullScreenBtn(param1:ToggleButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._356332415fullScreenBtn;
            if (_loc_2 !== param1)
            {
                this._356332415fullScreenBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "fullScreenBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get gearBtn() : Button
        {
            return this._91812275gearBtn;
        }// end function

        public function set gearBtn(param1:Button) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._91812275gearBtn;
            if (_loc_2 !== param1)
            {
                this._91812275gearBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "gearBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get gradientImage() : BitmapImage
        {
            return this._1943355381gradientImage;
        }// end function

        public function set gradientImage(param1:BitmapImage) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1943355381gradientImage;
            if (_loc_2 !== param1)
            {
                this._1943355381gradientImage = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "gradientImage", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get instructionsPanel() : InstructionsPanel
        {
            return this._387920735instructionsPanel;
        }// end function

        public function set instructionsPanel(param1:InstructionsPanel) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._387920735instructionsPanel;
            if (_loc_2 !== param1)
            {
                this._387920735instructionsPanel = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "instructionsPanel", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get interactiveTxt() : InteractiveTxt
        {
            return this._803371054interactiveTxt;
        }// end function

        public function set interactiveTxt(param1:InteractiveTxt) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._803371054interactiveTxt;
            if (_loc_2 !== param1)
            {
                this._803371054interactiveTxt = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "interactiveTxt", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get introBtn() : RadioButton
        {
            return this._582285392introBtn;
        }// end function

        public function set introBtn(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._582285392introBtn;
            if (_loc_2 !== param1)
            {
                this._582285392introBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "introBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get leftSideImage() : BitmapImage
        {
            return this._1261489667leftSideImage;
        }// end function

        public function set leftSideImage(param1:BitmapImage) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1261489667leftSideImage;
            if (_loc_2 !== param1)
            {
                this._1261489667leftSideImage = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "leftSideImage", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get loginScreen() : LoginScreen
        {
            return this._1299163445loginScreen;
        }// end function

        public function set loginScreen(param1:LoginScreen) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1299163445loginScreen;
            if (_loc_2 !== param1)
            {
                this._1299163445loginScreen = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "loginScreen", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get maxSpeedBtn() : ToggleButton
        {
            return this._98913767maxSpeedBtn;
        }// end function

        public function set maxSpeedBtn(param1:ToggleButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._98913767maxSpeedBtn;
            if (_loc_2 !== param1)
            {
                this._98913767maxSpeedBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "maxSpeedBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get minimizeBtn() : Button
        {
            return this._677171934minimizeBtn;
        }// end function

        public function set minimizeBtn(param1:Button) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._677171934minimizeBtn;
            if (_loc_2 !== param1)
            {
                this._677171934minimizeBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "minimizeBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get minusBtn() : Button
        {
            return this._1347844148minusBtn;
        }// end function

        public function set minusBtn(param1:Button) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1347844148minusBtn;
            if (_loc_2 !== param1)
            {
                this._1347844148minusBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "minusBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get movementMeter() : MovementBar
        {
            return this._2005217254movementMeter;
        }// end function

        public function set movementMeter(param1:MovementBar) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._2005217254movementMeter;
            if (_loc_2 !== param1)
            {
                this._2005217254movementMeter = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "movementMeter", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get normalSizeBtn() : ToggleButton
        {
            return this._85291956normalSizeBtn;
        }// end function

        public function set normalSizeBtn(param1:ToggleButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._85291956normalSizeBtn;
            if (_loc_2 !== param1)
            {
                this._85291956normalSizeBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "normalSizeBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get pauseBtn() : ToggleButton
        {
            return this._1273664646pauseBtn;
        }// end function

        public function set pauseBtn(param1:ToggleButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1273664646pauseBtn;
            if (_loc_2 !== param1)
            {
                this._1273664646pauseBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "pauseBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get plusBtn() : Button
        {
            return this._475309470plusBtn;
        }// end function

        public function set plusBtn(param1:Button) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._475309470plusBtn;
            if (_loc_2 !== param1)
            {
                this._475309470plusBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "plusBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get previewPane() : PreviewPane
        {
            return this._1291348144previewPane;
        }// end function

        public function set previewPane(param1:PreviewPane) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1291348144previewPane;
            if (_loc_2 !== param1)
            {
                this._1291348144previewPane = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "previewPane", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get rightSideImage() : BitmapImage
        {
            return this._1221159032rightSideImage;
        }// end function

        public function set rightSideImage(param1:BitmapImage) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1221159032rightSideImage;
            if (_loc_2 !== param1)
            {
                this._1221159032rightSideImage = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "rightSideImage", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneBtn2() : RadioButton
        {
            return this._1728820226sceneBtn2;
        }// end function

        public function set sceneBtn2(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1728820226sceneBtn2;
            if (_loc_2 !== param1)
            {
                this._1728820226sceneBtn2 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneBtn2", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneBtn3() : RadioButton
        {
            return this._1728820227sceneBtn3;
        }// end function

        public function set sceneBtn3(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1728820227sceneBtn3;
            if (_loc_2 !== param1)
            {
                this._1728820227sceneBtn3 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneBtn3", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneBtn4() : RadioButton
        {
            return this._1728820228sceneBtn4;
        }// end function

        public function set sceneBtn4(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1728820228sceneBtn4;
            if (_loc_2 !== param1)
            {
                this._1728820228sceneBtn4 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneBtn4", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneBtn5() : RadioButton
        {
            return this._1728820229sceneBtn5;
        }// end function

        public function set sceneBtn5(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1728820229sceneBtn5;
            if (_loc_2 !== param1)
            {
                this._1728820229sceneBtn5 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneBtn5", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneBtn6() : RadioButton
        {
            return this._1728820230sceneBtn6;
        }// end function

        public function set sceneBtn6(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1728820230sceneBtn6;
            if (_loc_2 !== param1)
            {
                this._1728820230sceneBtn6 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneBtn6", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneBtn7() : RadioButton
        {
            return this._1728820231sceneBtn7;
        }// end function

        public function set sceneBtn7(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1728820231sceneBtn7;
            if (_loc_2 !== param1)
            {
                this._1728820231sceneBtn7 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneBtn7", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneBtn8() : RadioButton
        {
            return this._1728820232sceneBtn8;
        }// end function

        public function set sceneBtn8(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1728820232sceneBtn8;
            if (_loc_2 !== param1)
            {
                this._1728820232sceneBtn8 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneBtn8", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneBtn9() : RadioButton
        {
            return this._1728820233sceneBtn9;
        }// end function

        public function set sceneBtn9(param1:RadioButton) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1728820233sceneBtn9;
            if (_loc_2 !== param1)
            {
                this._1728820233sceneBtn9 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneBtn9", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sceneGroup() : SkinnableContainer
        {
            return this._2058380627sceneGroup;
        }// end function

        public function set sceneGroup(param1:SkinnableContainer) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._2058380627sceneGroup;
            if (_loc_2 !== param1)
            {
                this._2058380627sceneGroup = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sceneGroup", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get screenBar() : SkinnableContainer
        {
            return this._125066247screenBar;
        }// end function

        public function set screenBar(param1:SkinnableContainer) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._125066247screenBar;
            if (_loc_2 !== param1)
            {
                this._125066247screenBar = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "screenBar", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get scrubber() : HSlider
        {
            return this._396931072scrubber;
        }// end function

        public function set scrubber(param1:HSlider) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._396931072scrubber;
            if (_loc_2 !== param1)
            {
                this._396931072scrubber = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "scrubber", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get sensitivitySlider() : HSlider
        {
            return this._1067855776sensitivitySlider;
        }// end function

        public function set sensitivitySlider(param1:HSlider) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1067855776sensitivitySlider;
            if (_loc_2 !== param1)
            {
                this._1067855776sensitivitySlider = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "sensitivitySlider", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get splashscreen1() : SplashScreen
        {
            return this._602796286splashscreen1;
        }// end function

        public function set splashscreen1(param1:SplashScreen) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._602796286splashscreen1;
            if (_loc_2 !== param1)
            {
                this._602796286splashscreen1 = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "splashscreen1", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get titleAnimPlayer() : SWFLoader
        {
            return this._670914358titleAnimPlayer;
        }// end function

        public function set titleAnimPlayer(param1:SWFLoader) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._670914358titleAnimPlayer;
            if (_loc_2 !== param1)
            {
                this._670914358titleAnimPlayer = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "titleAnimPlayer", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get trackBg() : BitmapImage
        {
            return this._1067396368trackBg;
        }// end function

        public function set trackBg(param1:BitmapImage) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1067396368trackBg;
            if (_loc_2 !== param1)
            {
                this._1067396368trackBg = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "trackBg", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get videoContainer() : Group
        {
            return this._94162362videoContainer;
        }// end function

        public function set videoContainer(param1:Group) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._94162362videoContainer;
            if (_loc_2 !== param1)
            {
                this._94162362videoContainer = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "videoContainer", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get videoPlayer() : VideoDisplay
        {
            return this._949162812videoPlayer;
        }// end function

        public function set videoPlayer(param1:VideoDisplay) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._949162812videoPlayer;
            if (_loc_2 !== param1)
            {
                this._949162812videoPlayer = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "videoPlayer", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get volumeBtn() : Button
        {
            return this._2128310046volumeBtn;
        }// end function

        public function set volumeBtn(param1:Button) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._2128310046volumeBtn;
            if (_loc_2 !== param1)
            {
                this._2128310046volumeBtn = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "volumeBtn", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get volumeSlider() : VSlider
        {
            return this._1698099045volumeSlider;
        }// end function

        public function set volumeSlider(param1:VSlider) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._1698099045volumeSlider;
            if (_loc_2 !== param1)
            {
                this._1698099045volumeSlider = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "volumeSlider", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get scenes() : Vector.<SceneInfo>
        {
            return this._908068505scenes;
        }// end function

        public function set scenes(param1:Vector.<SceneInfo>) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._908068505scenes;
            if (_loc_2 !== param1)
            {
                this._908068505scenes = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "scenes", _loc_2, param1));
                }
            }
            return;
        }// end function

        protected function get controlPanelY() : Number
        {
            return this._780750482controlPanelY;
        }// end function

        protected function set controlPanelY(param1:Number) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._780750482controlPanelY;
            if (_loc_2 !== param1)
            {
                this._780750482controlPanelY = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "controlPanelY", _loc_2, param1));
                }
            }
            return;
        }// end function

        protected function get isMeterVisible() : Boolean
        {
            return this._921406733isMeterVisible;
        }// end function

        protected function set isMeterVisible(param1:Boolean) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._921406733isMeterVisible;
            if (_loc_2 !== param1)
            {
                this._921406733isMeterVisible = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "isMeterVisible", _loc_2, param1));
                }
            }
            return;
        }// end function

        public function get configXml() : XML
        {
            return this._804457099configXml;
        }// end function

        public function set configXml(param1:XML) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._804457099configXml;
            if (_loc_2 !== param1)
            {
                this._804457099configXml = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "configXml", _loc_2, param1));
                }
            }
            return;
        }// end function

        protected function get userName() : String
        {
            return this._266666762userName;
        }// end function

        protected function set userName(param1:String) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._266666762userName;
            if (_loc_2 !== param1)
            {
                this._266666762userName = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "userName", _loc_2, param1));
                }
            }
            return;
        }// end function

        protected function get pw() : String
        {
            return this._3591pw;
        }// end function

        protected function set pw(param1:String) : void
        {
            var _loc_2:Object = null;
            _loc_2 = this._3591pw;
            if (_loc_2 !== param1)
            {
                this._3591pw = param1;
                if (this.hasEventListener("propertyChange"))
                {
                    this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "pw", _loc_2, param1));
                }
            }
            return;
        }// end function

        public static function set watcherSetupUtil(param1:IWatcherSetupUtil2) : void
        {
            _watcherSetupUtil = param1;
            return;
        }// end function

    }
}
