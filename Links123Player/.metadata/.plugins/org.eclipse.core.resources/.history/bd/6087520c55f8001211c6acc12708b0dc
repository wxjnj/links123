<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import org.osmf.events.TimeEvent;
			private var native:NativeProcess;
			
			private function init():void
			{
				//初始化
				this.currentPt = new Vector3D();
				this.prevPt = new Vector3D();
				
				if(NativeProcess.isSupported == true)
				{
					txt.text = "能支持NativeProcess";
					native = new NativeProcess();
					native.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, dataHandler);
					native.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
					native.addEventListener(NativeProcessExitEvent.EXIT, onExit);
					native.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);
					native.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);
					
					var path:String;
					if (Capabilities.os.toLowerCase().indexOf("win") > -1)
					{
						path = "Win/vsdriver.exe";
					}
					else if (Capabilities.os.toLowerCase().indexOf("mac") > -1)
					{
						path  = "Mac/VSDriver";
					}
					var file:File = File.applicationDirectory;
					file = file.resolvePath(path);
					trace("executing driver file:"+file.url);
					
					try
					{
						var npsi:NativeProcessStartupInfo = new NativeProcessStartupInfo();
						npsi.executable = file;
						native.start(npsi);
					}
					catch (err:Error)
					{
						trace("启动进程失败");
					}
				}else
				{
					txt.text = "不能支持NativeProcess";
				}
				
				this.mouseIntensity = 2;
				this.movieSpeed = 1;
			}
			
			private var currentPt:Vector3D;
			public var prevPt:Vector3D;
			public var distance:Number;
			protected function dataHandler(event:ProgressEvent):void
			{
				var bytes:ByteArray = new ByteArray();
				native.standardOutput.readBytes(bytes, 0);
				
				//计算3维坐标
				bytes.endian = Endian.LITTLE_ENDIAN;
				this.currentPt.x = bytes.readShort();
				this.currentPt.y = bytes.readShort();
				this.currentPt.z = bytes.readShort();
				
				this.distance = Vector3D.distance(this.currentPt, this.prevPt);
				if (!isNaN(this.distance))
				{
					isNaN(this.distance);
				}
				if (this.distance <= 1000)
				{
				}
				if (this.currentPt.x > 1000)
				{
					this.distance = 0;
				}
				//保存上一个Vector3D
				this.prevPt = this.currentPt.clone();
				
				//将distance,currentPt传送到其它地方
				stage.frameRate = 60;
				stage.addEventListener(Event.ENTER_FRAME, this.onEnterFrame);
				
				//getDatadel();
			}
			
			public var zeroCount:int = 0;
			public var runningAvg:Number = 0;
			private var decay:Number = 0;
			public var soundStopped:Boolean = false;
			private var state:String;
			
			public var STATE_LOADING:String = "loading";
			public var STATE_LOGIN:String = "login";
			public var STATE_TITLE_ANIM:String = "titleAnim";
			public var STATE_INITIAL:String = "initial";
			public var STATE_INSTRUCTIONS:String = "instructions";
			public var STATE_PLAYBACK:String = "playback";
			public var STATE_SCENE_INTERACTIVE:String = "interactive";
			public var STATE_INTRO:String = "intro";
			public var STATE_SCENE_INTRO:String = "sceneIntro";
			public var STATE_SCENE_IDLE:String = "idle";
			public var STATE_SCENE_CLIMAX:String = "sceneClimax";
			public var STATE_CLIMAX:String = "climax";
			
			public var resumeThreshold:int = 15;
			private var mouseIntensity:Number;
			private var sensitivity:Number;
			private var movieSpeed:Number=1;
			//接受数据完成事件派发的参数
			private function getDatadel():void
			{
				if (this.distance == 0)
				{
					if (this.zeroCount++ > 5)
					{
						if (this.runningAvg > 1)
						{
							this.runningAvg = this.runningAvg * this.decay;
						}
						if (this.zeroCount > 20)
						{
						}
						if (!this.soundStopped)
						{
							trace("&&&&& 20 zero readings, stopping sound");
							this.soundStopped = true;
							//this.soundEngine.tick(0, (this.model.currentIndex + 1), false, ContentModel.playingAlternateContent);
						}
					}
				}
				else
				{
					if (this.state == this.STATE_SCENE_IDLE)
					{
					}
					if (this.runningAvg >= this.resumeThreshold)
					{
						this.resumeInteractiveScene();
					}
					else
					{
						this.zeroCount = 0;
						this.soundStopped = false;
						this.runningAvg = this.runningAvg * 0.875 + this.distance * 0.125;
					}
				}
			}
			
			private function resumeInteractiveScene(event:TimeEvent = null) : void
			{
				if (this.state != this.STATE_SCENE_IDLE)
				{
					return;
				}
//				if (this.videoPlayer.playing)
//				{
//					this.stopVideo();
//				}
//				else
//				{
//					this.clearVideo();
//				}
//				var _loc_2:* = this.model.getCurrentSceneInfo();
//				if (_loc_2.numContentFiles > 1)
//				{
//					this.mainClip = this.model.getCurrentInteractiveScene();
//				}
//				else if (this.mainClip.currentFrame != this.pausePos)
//				{
//					this.mainClip.gotoAndStop(this.pausePos);
//				}
				currentState = this.STATE_SCENE_INTERACTIVE;
//				this.clipContainer.addChild(this.mainClip);
//				this.setInteractiveClipWidth(this.videoContainer.width);
				this.state = this.STATE_SCENE_INTERACTIVE;
				stage.addEventListener(Event.ENTER_FRAME, this.onEnterFrame);
				return;
			}
			
			public var responsiveness:Number = 0.1;
			public var highSpeedTime:uint;
			private var changeAudioCounter:int = 0;
			public var MAX_MOVIE_SPEED:int = 90;
			private var mouseHideCounter:int = 0;
			private function changeAudioToLevel(level:int) : void
			{
				if (this.changeAudioCounter > 69)
				{
					//this.soundEngine.tick(level, (this.model.currentIndex + 1), false, ContentModel.playingAlternateContent);
					this.changeAudioCounter = 0;
				}
				return;
			}
			
			private function onEnterFrame(event:Event = null) : void
			{
				var _loc_2:uint = 0;
				if (this.runningAvg < 7)
				{
					this.decay = 0.5;
				}
				else if (this.runningAvg < 60)
				{
					this.decay = 0.972;
				}
				else
				{
					this.decay = 0.965;
				}
				this.mouseIntensity = this.runningAvg * this.sensitivity;
				trace("mouseIntensity:"+mouseIntensity);
				this.movieSpeed = this.responsiveness * this.mouseIntensity + this.movieSpeed * (1 - this.responsiveness);
				if (this.runningAvg < 7)
				{
					this.movieSpeed = 0;
					//this.soundEngine.tick(0, (this.model.currentIndex + 1), false, ContentModel.playingAlternateContent);
					if (this.highSpeedTime > 0)
					{
						_loc_2 = getTimer() - this.highSpeedTime;
						trace("**** slowDownTime=" + _loc_2);
						this.highSpeedTime = 0;
					}
					this.startIdleTimer();
				}
				else
				{
					this.stopIdleTimer();
					if (this.movieSpeed < 10)
					{
						this.movieSpeed = 10; 
					}
				}
				this.changeAudioCounter = this.changeAudioCounter + 1;
				//this.soundEngine.fadeSounds();
				if (this.movieSpeed > this.MAX_MOVIE_SPEED)
				{
					this.mouseHideCounter = this.mouseHideCounter + 1;
					this.movieSpeed = this.MAX_MOVIE_SPEED;
					this.mouseIntensity = this.MAX_MOVIE_SPEED;
					this.highSpeedTime = getTimer();
					this.changeAudioToLevel(3);
				}
				else if (this.movieSpeed > this.MAX_MOVIE_SPEED - 5)
				{
					this.mouseHideCounter = this.mouseHideCounter + 1;
					this.changeAudioToLevel(3);
				}
				else if (this.movieSpeed > this.MAX_MOVIE_SPEED - 30)
				{
					this.mouseHideCounter = this.mouseHideCounter + 1;
					this.changeAudioToLevel(2);
				}
				else if (this.movieSpeed >= 10)
				{
					this.mouseHideCounter = this.mouseHideCounter + 1;
					this.changeAudioToLevel(1);
				}
				//this.nextVideoFrame();
//				if (this.isMeterVisible)
//				{
//					this.prevMeterValue = this.movementMeter.value;
//					this.movementMeter.value = int(50 * this.mouseIntensity / this.MAX_MOVIE_SPEED * 0.1 + this.prevMeterValue * 0.9);
//				}
				this.mouseIntensity = this.mouseIntensity * this.decay;
				trace("mouseIntensity:"+mouseIntensity);
				if (this.mouseIntensity < 1)
				{
					this.mouseIntensity = 1;
				}
				this.movieSpeed = this.movieSpeed * this.decay;
				trace("movieSpeed:"+movieSpeed);
				return;
			}
			
			protected var idleTimer:Timer = new Timer(700,1);
			protected function startIdleTimer(ms:uint = 700) : void
			{
				if (!this.idleTimer.running)
				{
					this.idleTimer.delay = ms;
					this.idleTimer.addEventListener(TimerEvent.TIMER, this.onIdle);
					this.idleTimer.start();
				}
				return;
			}
			
			protected function stopIdleTimer() : void
			{
				if (this.idleTimer.running)
				{
					this.idleTimer.stop();
					this.idleTimer.removeEventListener(TimerEvent.TIMER, this.onIdle);
				}
				return;
			}
			
			protected function onIdle(event:TimerEvent) : void
			{
				if (this.idleTimer.running)
				{
					this.idleTimer.stop();
				}
				this.idleTimer.removeEventListener(TimerEvent.TIMER, this.onIdle);
				//this.startSceneIdle();
				return;
			}
			
			protected function onErrorData(event:ProgressEvent):void
			{
				
			}
			
			protected function onExit(event:NativeProcessExitEvent):void
			{
				
			}
			
			protected function onIOError(event:IOErrorEvent):void
			{
				
			}
			
		]]>
	</fx:Script>
	<s:Label id="txt" width="500" height="20">
	</s:Label>
</s:WindowedApplication>
