<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

@see spark.components.Button

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="21" minHeight="21" xmlns:controls="com.exsky.controls.*" 
				   alpha.disabled="0.5" creationComplete="sparkbuttonskin1_creationCompleteHandler(event)">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			import flash.filters.BitmapFilterQuality;
			import flash.filters.GlowFilter;
			
			import mx.events.FlexEvent;
			
			import spark.components.Group;
			/* Define the skin elements that should not be colorized. 
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay","con"];
			private var _fil:Array = new Array();
			
			public function get fil():Array
			{
				return _fil;
			}
			[Bindable]
			public function set fil(value:Array):void
			{
				_fil = value;
			}
			/** 
			 * @private
			 */     
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}  
			
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				var cr:Number = getStyle("cornerRadius");
//				
//				if (cornerRadius != cr)
//				{
//					cornerRadius = cr;
//					shadow.radiusX = cornerRadius;
//					fill.radiusX = cornerRadius;
//					lowlight.radiusX = cornerRadius;
//					highlight.radiusX = cornerRadius;
//					border.radiusX = cornerRadius;
//				}
//				
//				if (highlightStroke) highlightStroke.radiusX = cornerRadius;
//				if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
//				if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
//				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private var cornerRadius:Number = 2;
		
			protected function sparkbuttonskin1_creationCompleteHandler(event:FlexEvent):void
			{
				var glow:GlowFilter = new GlowFilter();
				glow.color = 0xFF0000;
				glow.alpha = 1; 
				glow.blurX = 25; 
				glow.blurY = 25;
				glow.quality = BitmapFilterQuality.MEDIUM;
				fil = [glow];
			}
			
		]]>        
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<s:Group top="0" bottom="0" right="0" left="0" id="con">
		<controls:FlexMovieClip verticalCenter="0" top="0" alpha="0.5" includeIn="disabled,up" source="{new PLAYER_REPEAT_READ2()}">
		</controls:FlexMovieClip>
		<controls:FlexMovieClip verticalCenter="0" top="0" includeIn="down,over" source="{new PLAYER_REPEAT_READ2()}">
		</controls:FlexMovieClip>
	</s:Group>
	
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
	<s:Label id="labelDisplay" visible="false"
			 textAlign="center"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
			 left="10" right="10" top="2" bottom="2">
	</s:Label>
	
</s:SparkButtonSkin>