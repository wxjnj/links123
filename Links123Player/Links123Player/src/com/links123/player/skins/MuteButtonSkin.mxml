<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the mute button of a Spark VideoPlayer component  
in the normal skin state. The normal skin state means the component is not in 
one of the <code>fullScreen</code> skin states.  

@see spark.components.VideoPlayer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" creationComplete="init()"
			 alpha.disabled="0.5" xmlns:components="com.sobey.player.components.*" xmlns:controls="com.exsky.controls.*" xmlns:local="*">
	
	<!-- host component -->
	<fx:Metadata>
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.mediaClasses.MuteButton")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import spark.components.mediaClasses.VolumeBar;
			
			private function init():void
			{
				// this is essentially just binding code.  Anytime the volume changes, 
				// let us know.
				hostComponent.addEventListener(FlexEvent.VALUE_COMMIT, valueCommitHandler);
				hostComponent.addEventListener(FlexEvent.MUTED_CHANGE, valueCommitHandler);
				volume = hostComponent.muted ? 0 : 0.8;
			}
			
			private function valueCommitHandler(event:Event):void
			{
				volume = hostComponent.muted ? 0 : hostComponent.volume;
			}
			
			private var _volume:Number = 0;
			
			/**
			 *  The volume of the video player, specified as a value between 0 and 1.
			 */
			public function get volume():Number
			{
				return _volume;
			}
			
			public function set volume(value:Number):void
			{
				if (value == _volume)
					return;
				
				_volume = value;
				muteBtn.set_Sound_LOGO_State(value);
				return;
				var bar1:Array = [bar1_1, bar1_2, bar1_3]; // 0-.25
				var bar2:Array = [bar2_1, bar2_2, bar2_3]; // .25-.5
				var bar3:Array = [bar3_1, bar3_2, bar3_3]; // .5-.75
				var bar4:Array = [bar4_1, bar4_2, bar4_3]; // .75-.1
				var bars:Array = [bar1, bar2, bar3, bar4];
				
				var curValue:Number = 0;
				for (var i:int = 0; i < bars.length; i++)
				{
					if (value <= curValue)
						setAlphaTo(bars[i], 0);
					else if (value >= (curValue + 0.25))
						setAlphaTo(bars[i], 1);
					else
						setAlphaTo(bars[i], (value-curValue)*4);
					
					curValue += 0.25;
				}
			}
			
			private function setAlphaTo(bar:Array, alpha:Number):void
			{
				for (var i:int = 0; i < bar.length; i++)
				{
					bar[i].alpha = alpha;
				}
			}
			[bindable]
			private var muteBtn:SOUND_LOGO=new SOUND_LOGO();
		]]>
		
	</fx:Script>
	
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over"/>
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	<!--- Defines the volume symbol. -->
	<s:Group horizontalCenter="-15" verticalCenter="0" id="volumeSymbol">
		<controls:FlexMovieClip source="{muteBtn}"/>
	</s:Group>
</s:SparkSkin>
